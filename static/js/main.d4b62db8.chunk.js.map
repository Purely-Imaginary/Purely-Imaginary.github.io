{"version":3,"sources":["components/menu/menuLink.tsx","components/menu/menuLogo.tsx","constants.tsx","components/menu/menu.tsx","components/playerLabel/playerLabel.tsx","components/lastMatches/table.tsx","components/playersTable/playersTable.tsx","components/future/future.tsx","components/charts/highchart.tsx","components/playerPage/playerPage.tsx","components/mainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuLink","text","url","icon","className","href","MenuLogo","name","src","alt","BackendURL","Menu","PlayerLabel","player","playerLink","PlayerID","PlayerName","Math","round","Rating","LastMatchesTable","useState","ID","Time","BlueTeam","AvgTeamRating","RatingChange","Score","Players","RedTeam","data","setData","useEffect","a","axios","result","fetchData","Table","striped","hover","colSpan","map","match","key","moment","subtract","format","PlayersTable","Name","Wins","Losses","GoalsScored","GoalsLost","LastMatch","counter","maxRating","minRating","max","min","history","useHistory","avgGoalsPerGame","playerRatingPercent","WLRatio","onClick","playerID","push","fromNow","FutureList","processData","snapshots","processedData","forEach","value","MatchRef","valueOf","returnData","Object","entries","type","Highchart","props","chartData","Highcharts","title","style","color","font","legend","itemStyle","itemHoverStyle","chart","zoomType","backgroundColor","xAxis","labels","formatter","this","tickInterval","yAxis","gridLineColor","series","id","PlayerPage","useParams","state","count","increment","setState","decrement","path","React","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4b62db8.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    text: string;\n    url: string;\n    icon: string;\n}\n\nexport const MenuLink: React.FC<Props> = ({text, url, icon}) => {\n    return (\n        <div className=\"menuLink\">\n            <a href={url}>\n                <div className=\"icon\">{icon}</div>\n                <div className=\"text\">{text}</div> \n            </a>\n        </div>\n    )\n}\n\nexport default MenuLink;\n","import React from 'react';\n\ninterface Props {\n    url: string;\n    name: string;\n}\n\nexport const MenuLogo: React.FC<Props> = ({url, name}) => {\n    return (\n        <img src={url} className={name} alt={name}/>\n    )\n}\n\nexport default MenuLogo;\n","export const BackendURL: string = \"https://919a6de8aec7.ngrok.io\"","import React from 'react';\nimport MenuLink from './menuLink';\nimport MenuLogo from './menuLogo';\nimport { BackendURL } from '../../constants';\nimport {HashRouter as Router} from \"react-router-dom\";\n\nexport const Menu: React.FC = () => {\n    return (\n        <Router>\n        <div className=\"menu\">\n            <MenuLogo url=\"logo512blue.png\" name=\"mainLogo\" />\n            <MenuLink text=\"Last matches\" url=\"/#/matches\" icon=\"ðŸ•‘\"/>\n            <MenuLink text=\"Players table\" url=\"/#/players\" icon=\"âš”\" />\n            <MenuLink text=\"Charts\" url=\"/#/charts\" icon=\"ðŸ“Š\" />\n            <MenuLink text=\"Future features\" url=\"/#/future\" icon=\"ðŸ’¡\" />\n            <div className=\"backendURL\"><span>{BackendURL}/p?u=</span></div>\n        </div>\n        </Router>\n    )\n}\n\nexport default Menu;\n","import React from 'react';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\nexport const PlayerLabel = (player : PlayerSnapshot) => {\n    const playerLink = \"#/showPlayer/\" + player.PlayerID\n    return (\n        <div className=\"playerLabel\">\n            <a href={playerLink}>\n                <span className=\"playerName\">{player.PlayerName}</span>\n                <span className=\"playerRating\"> - {Math.round(player.Rating)}</span>\n            </a>\n        </div>\n    )\n}\n\nexport default PlayerLabel;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport PlayerLabel from '../playerLabel/playerLabel';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const LastMatchesTable = () => {\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getLastMatches\",\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n    return (\n        <Table striped hover className=\"lastMatchTable\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Red Team Players</th>\n                    <th className=\"avgRedRating\">Avg Red Rating</th>\n                    <th className=\"scoreColumn\" colSpan={3}>Score</th>\n                    <th className=\"avgBlueRating\">Avg Blue Rating</th>\n                    <th>Blue Team Players</th>\n                    <th>Red Team Rating Change</th>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map(match =>\n                    <tr key={match.ID}>\n                        <td>{moment(match.Time).subtract(2, 'hours').format('DD-MM-YYYY HH:mm')}</td>\n                        <td className=\"redTeamMatches\">\n                            {match.RedTeam.Players.map(player =>\n                                <div key={player.PlayerID} className='redTeam'>\n                                    <PlayerLabel {...player}/>\n                                </div>\n                            )}\n                        </td>\n                        <td className=\"redTeamMatches avgRedRating\">{Math.round(match.RedTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"redTeamMatches scoreColumn\">{match.RedTeam.Score}</td>\n                        <td className=\"scoreColumn\"> : </td>\n                        <td className=\"blueTeamMatches scoreColumn\">{match.BlueTeam.Score}</td>\n                        <td className=\"blueTeamMatches avgBlueRating\">{Math.round(match.BlueTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"blueTeamMatches\">\n                            {match.BlueTeam.Players.map(player =>\n                                <div key={player.PlayerID} className='blueTeam'>\n                                    <PlayerLabel {...player}/>\n                                </div>\n                            )}\n                        </td>\n                        <td>{Math.round(match.RedTeam.RatingChange * 10) / 10}</td>\n                    </tr>\n                )}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default LastMatchesTable;\n","import React, { useState, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\n\ninterface Player {\n    ID: number,\n    Name: string,\n    Wins: number,\n    Losses: number,\n    GoalsScored: number,\n    GoalsLost: number,\n    LastMatch: string,\n    Rating: number,\n}\n\nexport const PlayersTable = () => {\n    const [data, setData] = useState<Player[]>([{\n        ID: 0,\n        Name: \"\",\n        Wins: 0,\n        Losses: 0,\n        GoalsScored: 0,\n        GoalsLost: 0,\n        LastMatch: \"\",\n        Rating: 0\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            BackendURL + \"/getPlayersTable\",\n          );\n          setData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n    let counter = 0;\n    let maxRating = 0;\n    let minRating = 2000;\n    data.map(player => {\n        maxRating = Math.max(maxRating, player.Rating);\n        minRating = Math.min(minRating, player.Rating);\n        return null\n    })\n\n    const history = useHistory();\n    function handleClick(playerID: number) {\n        history.push(\"/showPlayer/\" + playerID);\n    }\n\n    return (\n        <Table striped hover className=\"playersTable\">\n            <thead>\n                <tr>\n                <th>No.</th>\n                <th>Name</th>\n                <th>Wins</th>\n                <th>Losses</th>\n                <th>W/L Ratio</th>\n                <th className=\"goalsColumn\">Goals Scored</th>\n                <th className=\"goalsColumn\">Goals Lost</th>\n                <th className=\"goalsColumn\">Avg per game</th>\n                <th>Rating</th>\n                <th className=\"ratingPercent\">Rating %</th>\n                <th className=\"lastMatch\">Last played</th>\n                </tr>\n            </thead>\n            <tbody>\n        \n            {data.map(player => {\n\n                let avgGoalsScoredPerGame = Math.round(player.GoalsScored / (player.Wins + player.Losses) * 10)/10\n                let avgGoalsLostPerGame = Math.round(player.GoalsLost / (player.Wins + player.Losses) * 10)/10\n                let avgGoalsPerGame = avgGoalsScoredPerGame + \" : \" + avgGoalsLostPerGame\n                let playerRatingPercent = Math.round((1-((player.Rating - minRating) / (maxRating - minRating)))*100) + \"%\"\n\n                let WLRatio = Math.round(player.Wins / (player.Wins + player.Losses) * 10000) /100 + \"%\"\n                return (player.Wins + player.Losses > 10) && ++counter &&\n                <tr className=\"playerRow\" key={player.ID} onClick={() => handleClick(player.ID)}>\n                    <td>{counter}</td>\n                    <td>{player.Name}</td>\n                    <td>{player.Wins}</td>\n                    <td>{player.Losses}</td>\n                    <td>{WLRatio}</td>\n                    <td className=\"goalsColumn\">{player.GoalsScored}</td>\n                    <td className=\"goalsColumn\">{player.GoalsLost}</td>\n                    <td className=\"goalsColumn\">{avgGoalsPerGame}</td>\n                    <td>{player.Rating}</td>\n                    <td className=\"ratingPercent\">{playerRatingPercent}</td>\n            <td className=\"lastMatch\">{moment(player.LastMatch).fromNow()}</td>\n                </tr>\n            })}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default PlayersTable;\n","import React from 'react';\n\nexport const FutureList = () => {\n    return (\n        <div className=\"futureList\">\n            <h1>Incoming features</h1>\n            <ul>\n                <li><span className='finished'>Player labels</span> 27.08.2020</li>\n                <li>Match card</li>\n                <li>Player card</li>\n                <li>Full match analysis\n                <ul>\n                    <li>Goals</li>\n                    <li>Ball position</li>\n                    <li>Ball posession\n                        <ul>\n                            <li>Proximity based</li>\n                            <li>Touch based</li>\n                        </ul>\n                    </li>\n                    <li>Player position heatmap</li>\n                </ul>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default FutureList;","import React, { useEffect } from 'react';\nimport * as Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport moment from 'moment';\n\n\ninterface PlayerSnapshot {\n    MatchID: number,\n    MatchRef: any,\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\n\nconst processData = (snapshots: PlayerSnapshot[]) => {\n    let processedData: any = {}\n    snapshots.forEach((value) => {\n        if (!(value.PlayerName in processedData)) {\n            processedData[value.PlayerName] = []\n        }\n        processedData[value.PlayerName].push([\n            moment(value.MatchRef.Time).valueOf(),\n            value.Rating,\n        ])\n    })\n    let returnData: any = []\n    Object.entries(processedData).forEach(\n        ([key, value]) => returnData.push({\n            type: 'line',\n            name: key,\n            data: value\n        })\n    );\n\n\n    return returnData;\n}\n\nexport const Highchart = (props: HighchartsReact.Props) => {\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getPlayersSnapshots\",\n            );\n            let chartData = processData(result.data)\n            Highcharts.chart('highchart-container', {\n                title: {\n                    text: 'Rating over time',\n                    style: {\n                        color: '#FFF',\n                        font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif'\n                    }\n                },\n                legend: {\n                    itemStyle: {\n                        font: '9pt Trebuchet MS, Verdana, sans-serif',\n                        color: 'white'\n                    },\n                    itemHoverStyle:{\n                        color: 'white'\n                    }   \n                },\n                chart: {\n                    zoomType: 'x',\n                    backgroundColor: 'rgb(6, 29, 82)',\n                },\n                xAxis: {\n                    type: 'datetime',\n                    labels: {\n                        formatter: function() {\n                            return moment(this.value).format('DD-MM-YYYY');\n                        }\n                    },\n                    min: 1586268480000,\n                    tickInterval: 7*24*60*60*1000\n                },\n                yAxis: {\n                    gridLineColor: 'black'\n                },\n                series: chartData\n            })\n\n\n        };\n\n        fetchData();\n    }, []);\n        return (\n            <div id='highchart-container'>\n                <h1>Loading charts...</h1>\n            </div>\n        )\n}\n\nexport default Highchart;","import React, { useState, useEffect } from 'react';\nimport { useParams} from \"react-router\";\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const PlayerPage = () => {\n    let { playerID } = useParams();\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getLastMatches\",\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <h1>TEST FOR PLAYER ID {playerID}</h1>\n    )\n}\n\nexport default PlayerPage;\n","import * as React from 'react';\nimport LastMatchesTable from './lastMatches/table';\nimport PlayersTable from './playersTable/playersTable'\nimport FutureList from './future/future';\nimport Highchart from './charts/highchart';\nimport PlayerPage from './playerPage/playerPage';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nexport default class Menu extends React.Component {\n    state = {\n      count: 0\n    };\n  \n    increment = () => {\n      this.setState({\n        count: (this.state.count + 1)\n      });\n    };\n  \n    decrement = () => {\n      this.setState({\n        count: (this.state.count - 1)\n      });\n    };\n  \n    render () {\n      return (\n        <Router>\n          <div className=\"mainContainer\">\n            <Switch>\n              <Route path=\"/future\">\n                <FutureList />\n              </Route>\n              <Route path=\"/charts\">\n                <Highchart />\n              </Route>\n              <Route path=\"/matches\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n              </Route>\n              <Route path=\"/showPlayer/:playerID\">\n                <PlayerPage />\n              </Route>\n              <Route path=\"/players\">\n                <h1>Players Table</h1>\n                <PlayersTable />\n              </Route>\n              <Route path=\"/\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      )\n    }\n  }\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/menu/menu'\nimport MainContainer from './components/mainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}