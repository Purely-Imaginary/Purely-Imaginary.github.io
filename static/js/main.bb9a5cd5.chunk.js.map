{"version":3,"sources":["components/menu/menuLink.tsx","components/menu/menuLogo.tsx","constants.tsx","components/menu/menu.tsx","components/lastMatches/table.tsx","components/playersTable/playersTable.tsx","components/future/future.tsx","components/mainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuLink","text","url","icon","className","href","MenuLogo","name","src","alt","BackendURL","Menu","LastMatchesTable","useState","ID","Time","BlueTeam","AvgTeamRating","RatingChange","Score","Players","PlayerID","PlayerName","Rating","RedTeam","data","setData","useEffect","a","axios","result","console","log","fetchData","Table","striped","hover","map","match","key","moment","format","player","PlayersTable","Name","Wins","Losses","GoalsScored","GoalsLost","counter","FutureList","state","count","increment","setState","decrement","path","React","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb9a5cd5.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    text: string;\n    url: string;\n    icon: string;\n}\n\nexport const MenuLink: React.FC<Props> = ({text, url, icon}) => {\n    return (\n        <div className=\"menuLink\">\n            <a href={url}>\n                <div className=\"icon\">{icon}</div>\n                <div className=\"text\">{text}</div> \n            </a>\n        </div>\n    )\n}\n\nexport default MenuLink;\n","import React from 'react';\n\ninterface Props {\n    url: string;\n    name: string;\n}\n\nexport const MenuLogo: React.FC<Props> = ({url, name}) => {\n    return (\n        <img src={url} className={name} alt={name}/>\n    )\n}\n\nexport default MenuLogo;\n","export const BackendURL: string = \"https://64c99a553dd8.ngrok.io\"","import React from 'react';\nimport MenuLink from './menuLink';\nimport MenuLogo from './menuLogo';\nimport { BackendURL } from '../../constants';\nimport {HashRouter as Router} from \"react-router-dom\";\n\nexport const Menu: React.FC = () => {\n    return (\n        <Router>\n        <div className=\"menu\">\n            <MenuLogo url=\"logo512blue.png\" name=\"mainLogo\" />\n            <MenuLink text=\"Last matches\" url=\"/#/\" icon=\"🕑\"/>\n            <MenuLink text=\"Players table\" url=\"/#/\" icon=\"⚔\" />\n            <MenuLink text=\"Leagues\" url=\"/#/future\" icon=\"🏆\" />\n            <MenuLink text=\"Future features\" url=\"/#/future\" icon=\"💡\" />\n            <div className=\"backendURL\"><span>{BackendURL}/p?u=</span></div>\n        </div>\n        </Router>\n    )\n}\n\nexport default Menu;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const LastMatchesTable = () => {\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"\",\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            BackendURL + \"/getLastMatches\",\n          );\n            console.log(result.data);\n          setData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n    return (\n        <Table striped hover className=\"lastMatchTable\">\n            <thead>\n                <tr>\n                <th>ID</th>\n                <th>Date</th>\n                <th>Red Team Players</th>\n                <th>Avg Red Rating</th>\n                <th>Red Team Score</th>\n                <th>Blue Team Score</th>\n                <th>Avg Blue Rating</th>\n                <th>Blue Team Players</th>\n                <th>Red Team Rating Change</th>\n                </tr>\n            </thead>\n            <tbody>\n            {data.map(match => \n                <tr key={match.ID}>\n                    <td>{match.ID}</td>\n                    <td>{moment(match.Time).format('DD-MM-YYYY')}</td>\n                    <td className=\"redTeamMatches\">\n                        {match.RedTeam.Players.map(player => \n                        <div key={player.PlayerID}>\n                        {player.PlayerName} - {player.Rating}\n                        </div>\n                            )}\n                    </td>\n                    <td className=\"redTeamMatches\">{match.RedTeam.AvgTeamRating}</td>\n                    <td className=\"redTeamMatches\">{match.RedTeam.Score}</td>\n                    <td className=\"blueTeamMatches\">{match.BlueTeam.Score}</td>\n                    <td className=\"blueTeamMatches\">{match.BlueTeam.AvgTeamRating}</td>\n                    <td className=\"blueTeamMatches\">\n                        {match.BlueTeam.Players.map(player => \n                        <div key={player.PlayerID}>\n                        {player.PlayerName} - {player.Rating}\n                        </div>\n                            )}\n                    </td>\n                    <td>{match.RedTeam.RatingChange}</td>\n                </tr>\n            )}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default LastMatchesTable;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\n\ninterface Player {\n    ID: number,\n    Name: string,\n    Wins: number,\n    Losses: number,\n    GoalsScored: number,\n    GoalsLost: number,\n    Rating: number,\n}\n\nexport const PlayersTable = () => {\n    const [data, setData] = useState<Player[]>([{\n        ID: 0,\n        Name: \"\",\n        Wins: 0,\n        Losses: 0,\n        GoalsScored: 0,\n        GoalsLost: 0,\n        Rating: 0\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            BackendURL + \"/getPlayersTable\",\n          );\n            console.log(result.data);\n          setData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n      let counter = 0;\n    return (\n        <Table striped hover className=\"playersTable\">\n            <thead>\n                <tr>\n                <th>No.</th>\n                <th>Name</th>\n                <th>Wins</th>\n                <th>Losses</th>\n                <th>Goals Scored</th>\n                <th>Goals Lost</th>\n                <th>Rating</th>\n                </tr>\n            </thead>\n            <tbody>\n        \n            {data.map(player => {\n                return (player.Wins + player.Losses > 10) && ++counter &&\n                <tr className=\"playerRow\" key={player.ID}>\n                    <td>{counter}</td>\n                    <td>{player.Name}</td>\n                    <td>{player.Wins}</td>\n                    <td>{player.Losses}</td>\n                    <td>{player.GoalsScored}</td>\n                    <td>{player.GoalsLost}</td>\n                    <td>{player.Rating}</td>\n                </tr>\n            })}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default PlayersTable;\n","import React from 'react';\n\nexport const FutureList = () => {\n    return (\n        <div className=\"futureList\">\n            <h1>Incoming features</h1>\n            <ul>\n                <li>RWD tables, hiding less important columns</li>\n                <li>Player labels</li>\n                <li>Player card</li>\n                <li>Match card</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default FutureList;","import * as React from 'react';\nimport LastMatchesTable from './lastMatches/table';\nimport PlayersTable from './playersTable/playersTable'\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport FutureList from './future/future';\n\n\nexport default class Menu extends React.Component {\n    state = {\n      count: 0\n    };\n  \n    increment = () => {\n      this.setState({\n        count: (this.state.count + 1)\n      });\n    };\n  \n    decrement = () => {\n      this.setState({\n        count: (this.state.count - 1)\n      });\n    };\n  \n    render () {\n      return (\n        <Router>\n          <div className=\"mainContainer\">\n            <Switch>\n              <Route path=\"/future\">\n                <FutureList />\n              </Route>\n              <Route path=\"/\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n                <h1>Players Table</h1>\n                <PlayersTable />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      )\n    }\n  }\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/menu/menu'\nimport MainContainer from './components/mainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}