{"version":3,"sources":["components/menu/menuLink.tsx","components/menu/menuLogo.tsx","constants.tsx","components/menu/menu.tsx","components/playerLabel/playerLabel.tsx","components/playerGoalsLabel/playerGoalsLabel.tsx","components/lastMatches/table.tsx","components/playersTable/playersTable.tsx","components/future/future.tsx","components/charts/highchart.tsx","components/playerPage/playerPage.tsx","components/matchPage/matchPage.tsx","components/mainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuLink","text","url","icon","className","href","MenuLogo","name","src","alt","BackendURL","Menu","PlayerLabel","player","playerLink","PlayerID","PlayerName","Math","round","Rating","PlayerGoalsLabel","playerGoals","i","GoalsNumber","LastMatchesTable","useState","ID","Time","Goals","BlueTeam","AvgTeamRating","RatingChange","Score","Players","RedTeam","data","setData","useEffect","a","axios","result","fetchData","map","match","goal","console","log","history","useHistory","Table","striped","hover","colSpan","key","onClick","playerID","push","moment","format","PlayersTable","Name","Wins","Losses","GoalsShot","GoalsScored","GoalsLost","Matches","counter","maxRating","minRating","max","min","aggressionPercent","playerRatingPercent","WLRatio","Date","now","length","unix","undefined","fromNow","FutureList","processData","snapshots","processedData","forEach","value","MatchRef","valueOf","returnData","Object","entries","type","Highchart","props","chartData","Highcharts","title","style","color","font","legend","itemStyle","itemHoverStyle","chart","zoomType","backgroundColor","xAxis","labels","formatter","this","tickInterval","yAxis","gridLineColor","series","id","PlayerPage","useParams","secondsToTime","seconds","floor","minutes","secString","toString","MatchPage","matchID","StartTime","EndTime","IsRed","ShotTime","TravelTime","arrow","abs","state","count","increment","setState","decrement","path","React","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c99baf7b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    text: string;\n    url: string;\n    icon: string;\n}\n\nexport const MenuLink: React.FC<Props> = ({text, url, icon}) => {\n    return (\n        <div className=\"menuLink\">\n            <a href={url}>\n                <div className=\"icon\">{icon}</div>\n                <div className=\"text\">{text}</div> \n            </a>\n        </div>\n    )\n}\n\nexport default MenuLink;\n","import React from 'react';\n\ninterface Props {\n    url: string;\n    name: string;\n}\n\nexport const MenuLogo: React.FC<Props> = ({url, name}) => {\n    return (\n        <img src={url} className={name} alt={name}/>\n    )\n}\n\nexport default MenuLogo;\n","export const BackendURL: string = \"https://5fba0c1a8d22.ngrok.io\"\n// export const BackendURL: string = \"http://localhost:7777\"","import React from 'react';\nimport MenuLink from './menuLink';\nimport MenuLogo from './menuLogo';\nimport { BackendURL } from '../../constants';\nimport {HashRouter as Router} from \"react-router-dom\";\n\nexport const Menu: React.FC = () => {\n    return (\n        <Router>\n        <div className=\"menu\">\n            <MenuLogo url=\"logo512blue.png\" name=\"mainLogo\" />\n            <MenuLink text=\"Last matches\" url=\"/#/matches\" icon=\"🕑\"/>\n            <MenuLink text=\"Players table\" url=\"/#/players\" icon=\"⚔\" />\n            <MenuLink text=\"Charts\" url=\"/#/charts\" icon=\"📊\" />\n            <MenuLink text=\"Future features\" url=\"/#/future\" icon=\"💡\" />\n            <div className=\"backendURL\"><span>{BackendURL}/p?u=</span></div>\n        </div>\n        </Router>\n    )\n}\n\nexport default Menu;\n","import React from 'react';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\nexport const PlayerLabel = (player : PlayerSnapshot) => {\n    const playerLink = \"#/showPlayer/\" + player.PlayerID\n    return (\n        <div className=\"playerLabel\">\n            <div>\n                <a href={playerLink}>\n                    <span className=\"playerName\">{player.PlayerName}</span>\n                    <span className=\"playerRating\"> - {Math.round(player.Rating)}</span>\n                </a>\n            </div>\n        </div>\n    )\n}\n\nexport default PlayerLabel;\n","import React from 'react';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    GoalsNumber: number,\n    Rating: number\n}\n\nexport const PlayerGoalsLabel = (player : PlayerSnapshot) => {\n    const playerLink = \"#/showPlayer/\" + player.PlayerID\n    let playerGoals = \"\"\n    for (let i = 0; i < player.GoalsNumber; i++) {\n        playerGoals += \"⚽\"\n    }\n    return (\n            <div className=\"playerGoals\">\n                <span>{playerGoals}</span>\n            </div>\n    )\n}\n\nexport default PlayerGoalsLabel;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport PlayerLabel from '../playerLabel/playerLabel';\nimport PlayerGoalsLabel from '../playerGoalsLabel/playerGoalsLabel';\nimport { useHistory } from 'react-router-dom';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    GoalsNumber: number,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    Goals: any[],\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const LastMatchesTable = () => {\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        Goals: [],\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                GoalsNumber: 0,\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                GoalsNumber: 0,\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getLastMatches\",\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n\n\n        setData(data);\n    }, []);\n\n            \n    data.map(match => {\n        match.RedTeam.Players.map (player => {\n            player.GoalsNumber = 0\n            match.Goals.map(goal => {\n                if (player.PlayerID === goal.PlayerID){\n                    player.GoalsNumber++\n                } \n            })\n            return player\n        })\n        match.BlueTeam.Players.map (player => {\n            player.GoalsNumber = 0\n            match.Goals.map(goal => {\n                if (player.PlayerID === goal.PlayerID){\n                    player.GoalsNumber++\n                } \n            })\n            return player\n        })\n        return match\n    }, data)\n    console.log(data)\n\n    const history = useHistory();\n    function handleClick(playerID: number) {\n        history.push(\"/showMatch/\" + playerID);\n    }\n\n    return (\n        <Table striped hover className=\"lastMatchTable\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Red Team Players</th>\n                    <th className=\"avgRedRating\">Avg Red Rating</th>\n                    <th className=\"scoreColumn\" colSpan={3}>Score</th>\n                    <th className=\"avgBlueRating\">Avg Blue Rating</th>\n                    <th>Blue Team Players</th>\n                    <th>Red Team Rating Change</th>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map(match =>\n                    <tr key={match.ID} onClick={() => handleClick(match.ID)}>\n                        <td>{moment(match.Time).format('DD-MM-YYYY HH:mm')}</td>\n                        <td className=\"redTeamMatches\">\n                            {match.RedTeam.Players.map(player =>\n                                <div key={player.PlayerID} className='redTeam'>\n                                    <PlayerLabel {...player}/>\n                                    <PlayerGoalsLabel {...player}/>\n                                </div>\n                            )}\n                        </td>\n                        <td className=\"redTeamMatches avgRedRating\">{Math.round(match.RedTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"redTeamMatches scoreColumn\">{match.RedTeam.Score}</td>\n                        <td className=\"scoreColumn\"> : </td>\n                        <td className=\"blueTeamMatches scoreColumn\">{match.BlueTeam.Score}</td>\n                        <td className=\"blueTeamMatches avgBlueRating\">{Math.round(match.BlueTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"blueTeamMatches\">\n                            {match.BlueTeam.Players.map(player =>\n                                <div key={player.PlayerID} className='blueTeam'>\n                                    <PlayerLabel {...player}/>\n                                    <PlayerGoalsLabel {...player}/>\n                                </div>\n                            )}\n                        </td>\n                        <td>{Math.round(match.RedTeam.RatingChange * 10) / 10}</td>\n                    </tr>\n                )}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default LastMatchesTable;\n","import React, { useState, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\n\ninterface Player {\n    ID: number,\n    Name: string,\n    Wins: number,\n    Losses: number,\n    GoalsShot: number,\n    GoalsScored: number,\n    GoalsLost: number,\n    Matches: any[],\n    Rating: number,\n}\n\nexport const PlayersTable = () => {\n    const [data, setData] = useState<Player[]>([{\n        ID: 0,\n        Name: \"\",\n        Wins: 0,\n        Losses: 0,\n        GoalsShot: 0,\n        GoalsScored: 0,\n        GoalsLost: 0,\n        Matches: [],\n        Rating: 0\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            BackendURL + \"/getPlayersTable\",\n          );\n          setData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n\n    let counter = 0;\n    let maxRating = 0;\n    let minRating = 2000;\n    data.map(player => {\n        maxRating = Math.max(maxRating, player.Rating);\n        minRating = Math.min(minRating, player.Rating);\n        return null\n    })\n\n    const history = useHistory();\n    function handleClick(playerID: number) {\n        history.push(\"/showPlayer/\" + playerID);\n    }\n\n    return (\n        <Table striped hover className=\"playersTable\">\n            <thead>\n                <tr>\n                <th>No.</th>\n                <th>Name</th>\n                <th>Wins</th>\n                <th>Losses</th>\n                <th>W/L Ratio</th>\n                <th className=\"goalsColumn\">Goals Shot</th>\n                <th className=\"goalsColumn\">Goals Won</th>\n                <th className=\"goalsColumn\">Goals Lost</th>\n                <th className=\"goalsColumn\">Aggression %</th>\n                <th>Rating</th>\n                <th className=\"ratingPercent\">Rating %</th>\n                <th className=\"lastMatch\">Last played</th>\n                </tr>\n            </thead>\n            <tbody>\n        \n            {data.map(player => {\n                let aggressionPercent = (Math.round((player.GoalsShot / player.GoalsScored) * 1000) / 10)  + \"%\"\n                let playerRatingPercent = Math.round((1-((player.Rating - minRating) / (maxRating - minRating)))*100) + \"%\"\n\n                let WLRatio = Math.round(player.Wins / (player.Wins + player.Losses) * 10000) /100 + \"%\"\n                return (player.Wins + player.Losses > 10) &&\n                Date.now() - moment(player.Matches[player.Matches.length-1].Time).unix() * 1000 < 2592000000 && // 30 days\n                ++counter &&\n                <tr className=\"playerRow\" key={player.ID} onClick={() => handleClick(player.ID)}>\n                    <td>{counter}</td>\n                    <td>{player.Name}</td>\n                    <td>{player.Wins}</td>\n                    <td>{player.Losses}</td>\n                    <td>{WLRatio}</td>\n                    <td className=\"goalsColumn\">{player.GoalsShot}</td>\n                    <td className=\"goalsColumn\">{player.GoalsScored}</td>\n                    <td className=\"goalsColumn\">{player.GoalsLost}</td>\n                    <td className=\"goalsColumn\">{aggressionPercent}</td>\n                    <td>{Math.round(player.Rating * 10)/10}</td>\n                    <td className=\"ratingPercent\">{playerRatingPercent}</td>\n                    {\n                        player.Matches[0] !== undefined && \n                        <td className=\"lastMatch\">{moment(player.Matches[player.Matches.length-1].Time).fromNow()}</td>\n                    }\n                </tr>\n            })}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default PlayersTable;\n","import React from 'react';\n\nexport const FutureList = () => {\n    return (\n        <div className=\"futureList\">\n            <h1>Incoming features</h1>\n            <ul>\n                <li><span className='finished'>Player labels</span> 27.08.2020</li>\n                <li>Match card</li>\n                <li>Player card</li>\n                <li>Full match analysis\n                <ul>\n                    <li><span className='finished'>Goals</span> 22.09.2020</li>\n                    <li>Ball position</li>\n                    <li>Ball posession\n                        <ul>\n                            <li>Proximity based</li>\n                            <li>Touch based</li>\n                        </ul>\n                    </li>\n                    <li>Previous encounters</li>\n                    <li>Player position heatmap</li>\n                </ul>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default FutureList;","import React, { useEffect } from 'react';\nimport * as Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport moment from 'moment';\n\n\ninterface PlayerSnapshot {\n    MatchID: number,\n    MatchRef: any,\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\n\nconst processData = (snapshots: PlayerSnapshot[]) => {\n    let processedData: any = {}\n    snapshots.forEach((value) => {\n        if (!(value.PlayerName in processedData)) {\n            processedData[value.PlayerName] = []\n            processedData[value.PlayerName].push([\n                moment(value.MatchRef.Time).valueOf()-3600000,\n                1000,\n            ])\n        }\n        processedData[value.PlayerName].push([\n            moment(value.MatchRef.Time).valueOf(),\n            value.Rating,\n        ])\n    })\n    let returnData: any = []\n    Object.entries(processedData).forEach(\n        ([key, value]) => returnData.push({\n            type: 'line',\n            name: key,\n            data: value\n        })\n    );\n\n\n    return returnData;\n}\n\nexport const Highchart = (props: HighchartsReact.Props) => {\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getPlayersSnapshots\",\n            );\n            let chartData = processData(result.data)\n            Highcharts.chart('highchart-container', {\n                title: {\n                    text: 'Rating over time',\n                    style: {\n                        color: '#FFF',\n                        font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif'\n                    }\n                },\n                legend: {\n                    itemStyle: {\n                        font: '9pt Trebuchet MS, Verdana, sans-serif',\n                        color: 'white'\n                    },\n                    itemHoverStyle:{\n                        color: 'white'\n                    }   \n                },\n                chart: {\n                    zoomType: 'x',\n                    backgroundColor: 'rgb(6, 29, 82)',\n                },\n                xAxis: {\n                    type: 'datetime',\n                    labels: {\n                        formatter: function() {\n                            return moment(this.value).format('DD-MM-YYYY');\n                        }\n                    },\n                    min: 1586250000000,\n                    tickInterval: 7*24*60*60*1000\n                },\n                yAxis: {\n                    gridLineColor: 'black'\n                },\n                series: chartData\n            })\n\n\n        };\n\n        fetchData();\n    }, []);\n        return (\n            <div id='highchart-container'>\n                <h1>Loading charts...</h1>\n            </div>\n        )\n}\n\nexport default Highchart;","import React, { useState, useEffect } from 'react';\nimport { useParams} from \"react-router\";\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const PlayerPage = () => {\n    let { playerID } = useParams();\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getLastMatches\",\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <div>\n        <h1>TEST FOR PLAYER ID {playerID}</h1>\n        </div>\n    )\n}\n\nexport default PlayerPage;\n","import React, { useState, useEffect } from 'react';\nimport { useParams} from \"react-router\";\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport PlayerLabel from '../playerLabel/playerLabel';\nimport PlayerGoalsLabel from '../playerGoalsLabel/playerGoalsLabel';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Goal {\n    IsRed: boolean,\n    PlayerID: number,\n    PlayerName: string,\n    ShotTime: number,\n    Time: number,\n    TravelTime: number\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    StartTime: number,\n    EndTime: number,\n    BlueTeam: Team,\n    RedTeam: Team,\n    Goals: Goal[]\n}\n\nfunction secondsToTime(seconds: number){\n    seconds = Math.floor(seconds)\n    let minutes = Math.floor(seconds / 60)\n    let secString = (seconds - minutes * 60).toString()\n    if (seconds - minutes * 60 < 10) {\n        secString = \"0\" + secString\n    }\n    return minutes + \":\" + secString\n}\n\nexport const MatchPage = () => {\n    let { matchID } = useParams();\n    const [data, setData] = useState<Match>({\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        StartTime: 0,\n        EndTime: 600,\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        Goals:\n        [{\n            IsRed: false,\n            PlayerID: 0,\n            PlayerName: \"\",\n            ShotTime: 0,\n            Time: 0,\n            TravelTime: 0\n        }]\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getMatchByID?id=\" + matchID,\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n\n    let arrow = \"==>\"\n    if (data.RedTeam.RatingChange > 0) {\n        arrow = \"<==\"\n    } \n\n    return (\n        <div>\n            <h2>MATCH DETAILS VIEW</h2>\n            <div className=\"matchDetailsPanels\">\n                <div className=\"leftPanel\">\n                    <div className=\"scorePanel\">\n                        <div>\n                            {data.RedTeam.Players.map(player => (\n                                <div key={player.PlayerID} className='redTeam'>\n                                    <PlayerLabel {...player}/>\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"scoreData\">\n                            <div className=\"scores\">\n                                <span className=\"redScore\">{data.RedTeam.Score}</span>\n                                {'\\u00A0'}:{'\\u00A0'}\n                                <span className=\"blueScore\">{data.BlueTeam.Score}</span>\n                            </div>\n                            <div className=\"arrow\">\n                                {arrow}\n                            </div>\n                            <div className=\"ratingChange\">\n                                {Math.abs(Math.round(data.RedTeam.RatingChange * 100) / 100)}\n                            </div>\n                        </div>\n                        <div>\n                        {data.BlueTeam.Players.map(player => (\n                                <div key={player.PlayerID} className='blueTeam'>\n                                    <PlayerLabel {...player}/>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"goalsChartTitle\">GOALS CHART</div>\n                    <div className=\"goalsChart\">\n                        <div className=\"goal matchStart\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart\">\n                                <div className=\"matchStartTime\">{secondsToTime(data.StartTime)}</div>\n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                        <div className=\"goal matchStart\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart\">\n                                <div className=\"goalElement matchStart\">ￜ</div>\n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                            {data.Goals.map(goal => (\n                                <div className=\"goal\">\n                                    <div className=\"redTeam\">\n                                    {goal.IsRed && \n                                        <div>\n                                             {goal.PlayerName} - {secondsToTime(goal.Time)}\n                                        </div>\n                                    }\n                                    </div>\n                                    <div className=\"chart\">\n                                    {goal.IsRed && \n                                        <div className=\"goalElement red\">ￆ</div>\n                                    }\n                                    {!goal.IsRed && \n                                        <div className=\"goalElement blue\">ￂ</div>\n                                    }\n                                    </div>\n\n                                    <div className=\"blueTeam\">\n                                    {!goal.IsRed && \n                                        <div>\n                                            {secondsToTime(goal.Time)} - {goal.PlayerName}\n                                        </div>\n                                    }\n                                    </div>\n                                </div>\n                            ))}\n\n                        <div className=\"goal\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart matchEnd\">\n                                <div className=\"goalElement matchEnd\">ￜ</div>\n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                        <div className=\"goal\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart matchEnd\">\n                                <div className=\"matchEndTime\">{secondsToTime(data.EndTime)}</div> \n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"rightPanel\">\n                    right\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MatchPage;\n","import * as React from 'react';\nimport LastMatchesTable from './lastMatches/table';\nimport PlayersTable from './playersTable/playersTable'\nimport FutureList from './future/future';\nimport Highchart from './charts/highchart';\nimport PlayerPage from './playerPage/playerPage';\nimport MatchPage from './matchPage/matchPage';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nexport default class Menu extends React.Component {\n    state = {\n      count: 0\n    };\n  \n    increment = () => {\n      this.setState({\n        count: (this.state.count + 1)\n      });\n    };\n  \n    decrement = () => {\n      this.setState({\n        count: (this.state.count - 1)\n      });\n    };\n  \n    render () {\n      return (\n        <Router>\n          <div className=\"mainContainer\">\n            <Switch>\n              <Route path=\"/future\">\n                <FutureList />\n              </Route>\n              <Route path=\"/charts\">\n                <Highchart />\n              </Route>\n              <Route path=\"/matches\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n              </Route>\n              <Route path=\"/showPlayer/:playerID\">\n                <PlayerPage />\n              </Route>\n              <Route path=\"/showMatch/:matchID\">\n                <MatchPage />\n              </Route>\n              <Route path=\"/players\">\n                <h1>Players Table</h1>\n                <PlayersTable />\n              </Route>\n              <Route path=\"/\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      )\n    }\n  }\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/menu/menu'\nimport MainContainer from './components/mainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}