{"version":3,"sources":["components/menu/menuLink.tsx","components/menu/menuLogo.tsx","constants.tsx","components/menu/menu.tsx","components/lastMatches/table.tsx","components/playersTable/playersTable.tsx","components/future/future.tsx","components/charts/highchart.tsx","components/mainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuLink","text","url","icon","className","href","MenuLogo","name","src","alt","BackendURL","Menu","LastMatchesTable","useState","ID","Time","BlueTeam","AvgTeamRating","RatingChange","Score","Players","PlayerID","PlayerName","Rating","RedTeam","data","setData","useEffect","a","axios","result","console","log","fetchData","Table","striped","hover","colSpan","map","match","key","moment","format","player","Math","round","PlayersTable","Name","Wins","Losses","GoalsScored","GoalsLost","LastMatch","counter","maxRating","minRating","max","min","avgGoalsPerGame","playerRatingPercent","WLRatio","fromNow","FutureList","type","seriesOptions","setSeriesOptions","processData","snapshots","processedData","forEach","value","push","MatchRef","valueOf","returnData","Object","entries","options","title","chart","zoomType","xAxis","labels","formatter","this","toString","Highchart","props","isLoaded","setIsLoaded","highcharts","Highcharts","chartData","state","count","increment","setState","decrement","path","React","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iOAmBeA,G,YAX0B,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,KAClD,OACI,yBAAKC,UAAU,YACX,uBAAGC,KAAMH,GACL,yBAAKE,UAAU,QAAQD,GACvB,yBAAKC,UAAU,QAAQH,OCAxBK,EAN0B,SAAC,GAAiB,IAAhBJ,EAAe,EAAfA,IAAKK,EAAU,EAAVA,KAC5C,OACI,yBAAKC,IAAKN,EAAKE,UAAWG,EAAME,IAAKF,KCThCG,EAAqB,gC,QCqBnBC,EAfe,WAC1B,OACI,kBAAC,IAAD,KACA,yBAAKP,UAAU,QACX,kBAAC,EAAD,CAAUF,IAAI,kBAAkBK,KAAK,aACrC,kBAAC,EAAD,CAAUN,KAAK,eAAeC,IAAI,MAAMC,KAAK,iBAC7C,kBAAC,EAAD,CAAUF,KAAK,gBAAgBC,IAAI,MAAMC,KAAK,WAC9C,kBAAC,EAAD,CAAUF,KAAK,SAASC,IAAI,YAAYC,KAAK,iBAC7C,kBAAC,EAAD,CAAUF,KAAK,kBAAkBC,IAAI,YAAYC,KAAK,iBACtD,yBAAKC,UAAU,cAAa,8BAAOM,EAAP,a,yGC8FzBE,EAnFiB,WAAO,IAAD,EACVC,mBAAkB,CAAC,CACvCC,GAAI,EACJC,KAAM,GACNC,SAAU,CACNC,cAAe,EACfC,aAAc,EACdC,MAAO,EACPC,QAAS,CAAC,CACNC,SAAU,EACVC,WAAY,GACZC,OAAQ,KAGhBC,QAAS,CACLP,cAAe,EACfC,aAAc,EACdC,MAAO,EACPC,QAAS,CAAC,CACNC,SAAU,EACVC,WAAY,GACZC,OAAQ,QArBc,mBAC3BE,EAD2B,KACrBC,EADqB,KAqClC,OAXAC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACOC,IACjBnB,EAAa,mBAFH,OACRoB,EADQ,OAIdC,QAAQC,IAAIF,EAAOL,MACnBC,EAAQI,EAAOL,MALD,2CAAH,qDAQfQ,KACD,IAEC,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAAChC,UAAU,kBAC3B,+BACI,4BACI,oCACA,gDACA,wBAAIA,UAAU,gBAAd,kBACA,wBAAIA,UAAU,cAAciC,QAAS,GAArC,SACA,wBAAIjC,UAAU,iBAAd,mBACA,iDACA,wDAGR,+BACKqB,EAAKa,KAAI,SAAAC,GAAK,OACX,wBAAIC,IAAKD,EAAMzB,IACX,4BAAK2B,IAAOF,EAAMxB,MAAM2B,OAAO,eAC/B,wBAAItC,UAAU,kBACTmC,EAAMf,QAAQJ,QAAQkB,KAAI,SAAAK,GAAM,OAC7B,yBAAKH,IAAKG,EAAOtB,UACb,0BAAMjB,UAAU,cAAcuC,EAAOrB,YACrC,0BAAMlB,UAAU,gBAAhB,MAAmCwC,KAAKC,MAAMF,EAAOpB,cAIjE,wBAAInB,UAAU,+BAA+BwC,KAAKC,MAAoC,GAA9BN,EAAMf,QAAQP,eAAsB,IAC5F,wBAAIb,UAAU,8BAA8BmC,EAAMf,QAAQL,OAC1D,wBAAIf,UAAU,eAAd,OACA,wBAAIA,UAAU,+BAA+BmC,EAAMvB,SAASG,OAC5D,wBAAIf,UAAU,iCAAiCwC,KAAKC,MAAqC,GAA/BN,EAAMvB,SAASC,eAAsB,IAC/F,wBAAIb,UAAU,mBACTmC,EAAMvB,SAASI,QAAQkB,KAAI,SAAAK,GAAM,OAC9B,yBAAKH,IAAKG,EAAOtB,UACb,0BAAMjB,UAAU,cAAcuC,EAAOrB,YACrC,0BAAMlB,UAAU,gBAAhB,MAAmCwC,KAAKC,MAAMF,EAAOpB,cAIjE,4BAAKqB,KAAKC,MAAmC,GAA7BN,EAAMf,QAAQN,cAAqB,WCL5D4B,EA/Ea,WAAO,IAAD,EACNjC,mBAAmB,CAAC,CACxCC,GAAI,EACJiC,KAAM,GACNC,KAAM,EACNC,OAAQ,EACRC,YAAa,EACbC,UAAW,EACXC,UAAW,GACX7B,OAAQ,KATkB,mBACvBE,EADuB,KACjBC,EADiB,KAY9BC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACKC,IACnBnB,EAAa,oBAFC,OACVoB,EADU,OAIdC,QAAQC,IAAIF,EAAOL,MACrBC,EAAQI,EAAOL,MALC,2CAAH,qDAQfQ,KACC,IACL,IAAIoB,EAAU,EACVC,EAAY,EACZC,EAAY,IAOhB,OANA9B,EAAKa,KAAI,SAAAK,GAGL,OAFAW,EAAYV,KAAKY,IAAIF,EAAWX,EAAOpB,QACvCgC,EAAYX,KAAKa,IAAIF,EAAWZ,EAAOpB,QAChC,QAIP,kBAACW,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAAChC,UAAU,gBAC3B,+BACI,4BACA,mCACA,oCACA,oCACA,sCACA,yCACA,wBAAIA,UAAU,eAAd,gBACA,wBAAIA,UAAU,eAAd,cACA,wBAAIA,UAAU,eAAd,gBACA,sCACA,wBAAIA,UAAU,iBAAd,YACA,wBAAIA,UAAU,aAAd,iBAGJ,+BAECqB,EAAKa,KAAI,SAAAK,GAEN,IAEIe,EAFwBd,KAAKC,MAAMF,EAAOO,aAAeP,EAAOK,KAAOL,EAAOM,QAAU,IAAI,GAElD,MADpBL,KAAKC,MAAMF,EAAOQ,WAAaR,EAAOK,KAAOL,EAAOM,QAAU,IAAI,GAExFU,EAAsBf,KAAKC,MAAkE,KAA3D,GAAIF,EAAOpB,OAASgC,IAAcD,EAAYC,KAAoB,IAEpGK,EAAUhB,KAAKC,MAAMF,EAAOK,MAAQL,EAAOK,KAAOL,EAAOM,QAAU,KAAQ,IAAM,IACrF,OAAQN,EAAOK,KAAOL,EAAOM,OAAS,MAASI,GAC/C,wBAAIjD,UAAU,YAAYoC,IAAKG,EAAO7B,IAClC,4BAAKuC,GACL,4BAAKV,EAAOI,MACZ,4BAAKJ,EAAOK,MACZ,4BAAKL,EAAOM,QACZ,4BAAKW,GACL,wBAAIxD,UAAU,eAAeuC,EAAOO,aACpC,wBAAI9C,UAAU,eAAeuC,EAAOQ,WACpC,wBAAI/C,UAAU,eAAesD,GAC7B,4BAAKf,EAAOpB,QACZ,wBAAInB,UAAU,iBAAiBuD,GACvC,wBAAIvD,UAAU,aAAaqC,IAAOE,EAAOS,WAAWS,kBCxEjDC,EAdW,WACtB,OACI,yBAAK1D,UAAU,cACX,iDACA,4BACI,yEACA,6CACA,2CACA,6C,2BCK0BS,mBAAS,CAAC,CAChDkD,KAAM,OAAQxD,KAAM,IAAKkB,KAAM,CAAC,CAC5B,CAAC,YAAe,SAChB,CAAC,YAAe,YAErB,CACCsC,KAAM,OAAQxD,KAAM,IAAKkB,KAAM,CAC3B,CAAC,YAAe,SAChB,CAAC,YAAe,a,mBARjBuC,E,KAAeC,E,KAYhBC,EAAc,SAACC,GACjB,IAAIC,EAAqB,GACzBD,EAAUE,SAAQ,SAACC,GACTA,EAAMhD,cAAc8C,IACtBA,EAAcE,EAAMhD,YAAc,IAEtC8C,EAAcE,EAAMhD,YAAYiD,KAAK,CACjC9B,IAAO6B,EAAME,SAASzD,MAAM0D,UAC5BH,EAAM/C,YAGd,IAAImD,EAAkB,GAUtB,OATAC,OAAOC,QAAQR,GAAeC,SAC1B,mCAAE7B,EAAF,KAAO8B,EAAP,YAAkBI,EAAWH,KAAK,CAC9BR,KAAM,OACNxD,KAAMiC,EACNf,KAAM6C,OAKPI,GAGLG,EAA8B,CAChCC,MAAO,CACH7E,KAAM,oBAEV8E,MAAO,CACHC,SAAU,KAEdC,MAAO,CACHC,OAAQ,CACJC,UAAW,WACP,OAAO1C,IAAO2C,KAAKd,OAAOe,aAGlC5B,IAAK,cA2CE6B,EAvCU,SAACC,GAAkC,IAAD,EACvB1E,oBAAS,GADc,mBAChD2E,EADgD,KACtCC,EADsC,KAmBvD,OAfA9D,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEACOC,IACjBnB,EAAa,wBAFH,OACRoB,EADQ,OAIVsC,EAAgBF,EAAYpC,EAAOL,MACvCwC,EAAiBG,GACjBrC,QAAQC,IAAIoC,GACZrC,QAAQC,IAAIgC,GACZyB,GAAY,GARE,2CAAH,qDAYfxD,KACD,IACCuD,EAEI,6BACI,kBAAC,IAAD,eACIE,WAAYC,EACZd,QAASA,EACTe,UAAW5B,GACPuB,KAMhB,+B,OCvFa5E,E,4MACjBkF,MAAQ,CACNC,MAAO,G,EAGTC,UAAY,WACV,EAAKC,SAAS,CACZF,MAAQ,EAAKD,MAAMC,MAAQ,K,EAI/BG,UAAY,WACV,EAAKD,SAAS,CACZF,MAAQ,EAAKD,MAAMC,MAAQ,K,uDAK7B,OACE,gBAAC,IAAD,KACE,uBAAK1F,UAAU,iBACb,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAO8F,KAAK,WACV,gBAAC,EAAD,OAEF,gBAAC,IAAD,CAAOA,KAAK,WACV,gBAAC,EAAD,OAEF,gBAAC,IAAD,CAAOA,KAAK,KACV,0CACA,gBAAC,EAAD,MACA,2CACA,gBAAC,EAAD,c,GAhCkBC,aCCnBC,MATf,WACE,OACE,yBAAKhG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGciG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjE,MACvB,2D,MCTNkE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtF,QAAQsF,MAAMA,EAAMC,c","file":"static/js/main.deb47a62.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    text: string;\n    url: string;\n    icon: string;\n}\n\nexport const MenuLink: React.FC<Props> = ({text, url, icon}) => {\n    return (\n        <div className=\"menuLink\">\n            <a href={url}>\n                <div className=\"icon\">{icon}</div>\n                <div className=\"text\">{text}</div> \n            </a>\n        </div>\n    )\n}\n\nexport default MenuLink;\n","import React from 'react';\n\ninterface Props {\n    url: string;\n    name: string;\n}\n\nexport const MenuLogo: React.FC<Props> = ({url, name}) => {\n    return (\n        <img src={url} className={name} alt={name}/>\n    )\n}\n\nexport default MenuLogo;\n","export const BackendURL: string = \"https://3420f47dfe2c.ngrok.io\"","import React from 'react';\nimport MenuLink from './menuLink';\nimport MenuLogo from './menuLogo';\nimport { BackendURL } from '../../constants';\nimport {HashRouter as Router} from \"react-router-dom\";\n\nexport const Menu: React.FC = () => {\n    return (\n        <Router>\n        <div className=\"menu\">\n            <MenuLogo url=\"logo512blue.png\" name=\"mainLogo\" />\n            <MenuLink text=\"Last matches\" url=\"/#/\" icon=\"ðŸ•‘\"/>\n            <MenuLink text=\"Players table\" url=\"/#/\" icon=\"âš”\" />\n            <MenuLink text=\"Charts\" url=\"/#/charts\" icon=\"ðŸ“Š\" />\n            <MenuLink text=\"Future features\" url=\"/#/future\" icon=\"ðŸ’¡\" />\n            <div className=\"backendURL\"><span>{BackendURL}/p?u=</span></div>\n        </div>\n        </Router>\n    )\n}\n\nexport default Menu;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const LastMatchesTable = () => {\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"\",\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getLastMatches\",\n            );\n            console.log(result.data);\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n    return (\n        <Table striped hover className=\"lastMatchTable\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Red Team Players</th>\n                    <th className=\"avgRedRating\">Avg Red Rating</th>\n                    <th className=\"scoreColumn\" colSpan={3}>Score</th>\n                    <th className=\"avgBlueRating\">Avg Blue Rating</th>\n                    <th>Blue Team Players</th>\n                    <th>Red Team Rating Change</th>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map(match =>\n                    <tr key={match.ID}>\n                        <td>{moment(match.Time).format('DD-MM-YYYY')}</td>\n                        <td className=\"redTeamMatches\">\n                            {match.RedTeam.Players.map(player =>\n                                <div key={player.PlayerID}>\n                                    <span className=\"playerName\">{player.PlayerName}</span>\n                                    <span className=\"playerRating\"> - {Math.round(player.Rating)}</span>\n                                </div>\n                            )}\n                        </td>\n                        <td className=\"redTeamMatches avgRedRating\">{Math.round(match.RedTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"redTeamMatches scoreColumn\">{match.RedTeam.Score}</td>\n                        <td className=\"scoreColumn\"> : </td>\n                        <td className=\"blueTeamMatches scoreColumn\">{match.BlueTeam.Score}</td>\n                        <td className=\"blueTeamMatches avgBlueRating\">{Math.round(match.BlueTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"blueTeamMatches\">\n                            {match.BlueTeam.Players.map(player =>\n                                <div key={player.PlayerID}>\n                                    <span className=\"playerName\">{player.PlayerName}</span>\n                                    <span className=\"playerRating\"> - {Math.round(player.Rating)}</span>\n                                </div>\n                            )}\n                        </td>\n                        <td>{Math.round(match.RedTeam.RatingChange * 10) / 10}</td>\n                    </tr>\n                )}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default LastMatchesTable;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\n\ninterface Player {\n    ID: number,\n    Name: string,\n    Wins: number,\n    Losses: number,\n    GoalsScored: number,\n    GoalsLost: number,\n    LastMatch: string,\n    Rating: number,\n}\n\nexport const PlayersTable = () => {\n    const [data, setData] = useState<Player[]>([{\n        ID: 0,\n        Name: \"\",\n        Wins: 0,\n        Losses: 0,\n        GoalsScored: 0,\n        GoalsLost: 0,\n        LastMatch: \"\",\n        Rating: 0\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            BackendURL + \"/getPlayersTable\",\n          );\n            console.log(result.data);\n          setData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n    let counter = 0;\n    let maxRating = 0;\n    let minRating = 2000;\n    data.map(player => {\n        maxRating = Math.max(maxRating, player.Rating);\n        minRating = Math.min(minRating, player.Rating);\n        return null\n    })\n\n    return (\n        <Table striped hover className=\"playersTable\">\n            <thead>\n                <tr>\n                <th>No.</th>\n                <th>Name</th>\n                <th>Wins</th>\n                <th>Losses</th>\n                <th>W/L Ratio</th>\n                <th className=\"goalsColumn\">Goals Scored</th>\n                <th className=\"goalsColumn\">Goals Lost</th>\n                <th className=\"goalsColumn\">Avg per game</th>\n                <th>Rating</th>\n                <th className=\"ratingPercent\">Rating %</th>\n                <th className=\"lastMatch\">Last played</th>\n                </tr>\n            </thead>\n            <tbody>\n        \n            {data.map(player => {\n\n                let avgGoalsScoredPerGame = Math.round(player.GoalsScored / (player.Wins + player.Losses) * 10)/10\n                let avgGoalsLostPerGame = Math.round(player.GoalsLost / (player.Wins + player.Losses) * 10)/10\n                let avgGoalsPerGame = avgGoalsScoredPerGame + \" : \" + avgGoalsLostPerGame\n                let playerRatingPercent = Math.round((1-((player.Rating - minRating) / (maxRating - minRating)))*100) + \"%\"\n\n                let WLRatio = Math.round(player.Wins / (player.Wins + player.Losses) * 10000) /100 + \"%\"\n                return (player.Wins + player.Losses > 10) && ++counter &&\n                <tr className=\"playerRow\" key={player.ID}>\n                    <td>{counter}</td>\n                    <td>{player.Name}</td>\n                    <td>{player.Wins}</td>\n                    <td>{player.Losses}</td>\n                    <td>{WLRatio}</td>\n                    <td className=\"goalsColumn\">{player.GoalsScored}</td>\n                    <td className=\"goalsColumn\">{player.GoalsLost}</td>\n                    <td className=\"goalsColumn\">{avgGoalsPerGame}</td>\n                    <td>{player.Rating}</td>\n                    <td className=\"ratingPercent\">{playerRatingPercent}</td>\n            <td className=\"lastMatch\">{moment(player.LastMatch).fromNow()}</td>\n                </tr>\n            })}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default PlayersTable;\n","import React from 'react';\n\nexport const FutureList = () => {\n    return (\n        <div className=\"futureList\">\n            <h1>Incoming features</h1>\n            <ul>\n                <li>RWD tables, hiding less important columns</li>\n                <li>Player labels</li>\n                <li>Player card</li>\n                <li>Match card</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default FutureList;","import React, { useEffect, useState } from 'react';\nimport * as Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport moment from 'moment';\n\n\ninterface PlayerSnapshot {\n    MatchID: number,\n    MatchRef: any,\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\nconst [seriesOptions, setSeriesOptions] = useState([{\n    type: 'line', name: \"d\", data: [[\n        [1597850460000, 823.821],\n        [1597864520000, 828.457]\n    ]]\n}, {\n    type: 'line', name: \"y\", data: [\n        [1597850460000, 825.821],\n        [1597884520000, 829.457]\n    ]\n},\n]);\nconst processData = (snapshots: PlayerSnapshot[]) => {\n    let processedData: any = {}\n    snapshots.forEach((value) => {\n        if (!(value.PlayerName in processedData)) {\n            processedData[value.PlayerName] = []\n        }\n        processedData[value.PlayerName].push([\n            moment(value.MatchRef.Time).valueOf(),\n            value.Rating,\n        ])\n    })\n    let returnData: any = []\n    Object.entries(processedData).forEach(\n        ([key, value]) => returnData.push({\n            type: 'line',\n            name: key,\n            data: value\n        })\n    );\n\n\n    return returnData;\n}\n\nconst options: Highcharts.Options = {\n    title: {\n        text: 'Rating over time'\n    },\n    chart: {\n        zoomType: 'x'\n    },\n    xAxis: {\n        labels: {\n            formatter: function() {\n                return moment(this.value).toString();\n            }\n        },\n        min: 1597840460000\n    }\n}\n\nexport const Highchart = (props: HighchartsReact.Props) => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    \n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getPlayersSnapshots\",\n            );\n            let processedData = processData(result.data)\n            setSeriesOptions(processedData)\n            console.log(processedData);\n            console.log(seriesOptions);\n            setIsLoaded(true);\n\n        };\n\n        fetchData();\n    }, []);\n    if (isLoaded) {\n        return (\n            <div>\n                <HighchartsReact\n                    highcharts={Highcharts}\n                    options={options}\n                    chartData={seriesOptions}\n                    {...props}\n                />\n            </div>\n        )\n    } else {\n        return (\n        <div>\n            \n        </div>\n        )\n    }\n}\n\nexport default Highchart;","import * as React from 'react';\nimport LastMatchesTable from './lastMatches/table';\nimport PlayersTable from './playersTable/playersTable'\nimport FutureList from './future/future';\nimport Highchart from './charts/highchart'\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nexport default class Menu extends React.Component {\n    state = {\n      count: 0\n    };\n  \n    increment = () => {\n      this.setState({\n        count: (this.state.count + 1)\n      });\n    };\n  \n    decrement = () => {\n      this.setState({\n        count: (this.state.count - 1)\n      });\n    };\n  \n    render () {\n      return (\n        <Router>\n          <div className=\"mainContainer\">\n            <Switch>\n              <Route path=\"/future\">\n                <FutureList />\n              </Route>\n              <Route path=\"/charts\">\n                <Highchart />\n              </Route>\n              <Route path=\"/\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n                <h1>Players Table</h1>\n                <PlayersTable />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      )\n    }\n  }\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/menu/menu'\nimport MainContainer from './components/mainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}