{"version":3,"sources":["components/menu/menuLink.tsx","components/menu/menuLogo.tsx","constants.tsx","components/menu/menu.tsx","components/playerLabel/playerLabel.tsx","components/lastMatches/table.tsx","components/playersTable/playersTable.tsx","components/future/future.tsx","components/charts/highchart.tsx","components/playerPageTiles/generic.tsx","components/playerPage/playerPage.tsx","components/playerGoalsLabel/playerGoalsLabel.tsx","components/matchPage/matchPage.tsx","components/mainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MenuLink","text","url","icon","className","href","MenuLogo","name","src","alt","BackendURL","Menu","PlayerLabel","player","playerLink","PlayerID","history","useHistory","onClick","playerID","push","PlayerName","Rating","Math","round","LastMatchesTable","useState","ID","Time","Goals","BlueTeam","AvgTeamRating","RatingChange","Score","Players","GoalsNumber","RedTeam","data","setData","useEffect","a","axios","result","fetchData","map","match","goal","console","log","Table","striped","hover","colSpan","key","moment","format","PlayersTable","Name","Wins","Losses","GoalsShot","GoalsScored","GoalsLost","Matches","counter","maxRating","minRating","max","min","aggressionPercent","playerRatingPercent","WLRatio","Date","now","length","unix","undefined","fromNow","FutureList","processData","snapshots","processedData","forEach","value","MatchRef","valueOf","returnData","Object","entries","type","Highchart","props","chartData","Highcharts","title","style","color","font","legend","itemStyle","itemHoverStyle","chart","zoomType","backgroundColor","xAxis","labels","formatter","this","tickInterval","yAxis","gridLineColor","series","id","PlayerPageTile","subscript","PlayerPage","useParams","Player","WinRate","MatchID","Snapshots","PlayerRatings","bestRating","bestRatingDate","worstRating","worstRatingDate","biggestGain","biggestGainDate","biggestDrop","biggestDropDate","todayChange","weeksChange","monthChange","latestStreak","biggestWinningStreak","biggestWinningStreakDate","streakStart","streakValue","prevMatch","index","element","startOf","subtract","change","ratingPosition","upperNeighbor","lowerNeighbor","goalsPerMatch","goalsShotPerMatch","matchesPerDay","diff","lastMatchesTrend","additionalMatchData","alliesQuantitative","enemiesQuantitative","isPlayerRed","didRedWon","playerRatingChange","j","redPlayer","count","matchBalance","wonAgainst","lostAgainst","currentStreak","bluePlayer","pointsBalance","streakAmount","enemiesQuantitativeSorted","enemy","sort","b","enemiesBalanceSorted","alliesQuantitativeSorted","ally","toString","reverse","PlayerGoalsLabel","playerGoals","i","secondsToTime","seconds","floor","minutes","secString","MatchPage","matchID","StartTime","EndTime","IsRed","ShotTime","Speed","TravelTime","arrow","abs","target","state","increment","setState","decrement","path","React","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c275a81d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n    text: string;\n    url: string;\n    icon: string;\n}\n\nexport const MenuLink: React.FC<Props> = ({text, url, icon}) => {\n    return (\n        <div className=\"menuLink\">\n            <a href={url}>\n                <div className=\"icon\">{icon}</div>\n                <div className=\"text\">{text}</div> \n            </a>\n        </div>\n    )\n}\n\nexport default MenuLink;\n","import React from 'react';\n\ninterface Props {\n    url: string;\n    name: string;\n}\n\nexport const MenuLogo: React.FC<Props> = ({url, name}) => {\n    return (\n        <img src={url} className={name} alt={name}/>\n    )\n}\n\nexport default MenuLogo;\n","export const BackendURL: string = \"https://fef21c7b7c5a.ngrok.io\"\n// export const BackendURL: string = \"http://localhost:7777\"","import React from 'react';\nimport MenuLink from './menuLink';\nimport MenuLogo from './menuLogo';\nimport { BackendURL } from '../../constants';\nimport {HashRouter as Router} from \"react-router-dom\";\n\nexport const Menu: React.FC = () => {\n    return (\n        <Router>\n        <div className=\"menu\">\n            <MenuLogo url=\"logo512blue.png\" name=\"mainLogo\" />\n            <MenuLink text=\"Last matches\" url=\"/#/matches\" icon=\"🕑\"/>\n            <MenuLink text=\"Players table\" url=\"/#/players\" icon=\"⚔\" />\n            <MenuLink text=\"Charts\" url=\"/#/charts\" icon=\"📊\" />\n            <MenuLink text=\"Future features\" url=\"/#/future\" icon=\"💡\" />\n            <div className=\"backendURL\"><span>{BackendURL}/p?u=</span></div>\n        </div>\n        </Router>\n    )\n}\n\nexport default Menu;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\n\nexport const PlayerLabel = (player: PlayerSnapshot) => {\n    const playerLink = \"#/showPlayer/\" + player.PlayerID\n\n    const history = useHistory();\n    function handlePlayerClick(playerID: number) {\n        history.push(\"#/showMatch/\" + playerID);\n    }\n\n    return (\n        <div className=\"playerLabel\">\n            <div onClick={() => handlePlayerClick(player.PlayerID)}>\n                <a href={playerLink}>\n                    <span className=\"playerName\">{player.PlayerName}</span>\n                    {player.Rating != 0 &&\n                        <span className=\"playerRating\"> - {Math.round(player.Rating)}</span>\n                    }\n                </a>\n            </div>\n        </div>\n    )\n}\n\nexport default PlayerLabel;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport PlayerLabel from '../playerLabel/playerLabel';\nimport { useHistory } from 'react-router-dom';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    GoalsNumber: number,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    Goals: any[],\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\nexport const LastMatchesTable = () => {\n    const [data, setData] = useState<Match[]>([{\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        Goals: [],\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                GoalsNumber: 0,\n                Rating: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                GoalsNumber: 0,\n                Rating: 0\n            }]\n        }\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getLastMatches\",\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n\n\n        setData(data);\n    }, []);\n\n            \n    data.map(match => {\n        match.RedTeam.Players.map (player => {\n            player.GoalsNumber = 0\n            match.Goals.map(goal => {\n                if (player.PlayerID === goal.PlayerID){\n                    player.GoalsNumber++\n                } \n            })\n            return player\n        })\n        match.BlueTeam.Players.map (player => {\n            player.GoalsNumber = 0\n            match.Goals.map(goal => {\n                if (player.PlayerID === goal.PlayerID){\n                    player.GoalsNumber++\n                } \n            })\n            return player\n        })\n        return match\n    }, data)\n    console.log(data)\n\n    const history = useHistory();\n    function handleClick(playerID: number) {\n        history.push(\"/showMatch/\" + playerID);\n    }\n\n    return (\n        <Table striped hover className=\"lastMatchTable\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Red Team Players</th>\n                    <th className=\"avgRedRating\">Avg Red Rating</th>\n                    <th className=\"scoreColumn\" colSpan={3}>Score</th>\n                    <th className=\"avgBlueRating\">Avg Blue Rating</th>\n                    <th>Blue Team Players</th>\n                    <th>Red Team Rating Change</th>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map(match =>\n                    <tr key={match.ID} onClick={() => handleClick(match.ID)}>\n                        <td>{moment(match.Time).format('DD-MM-YYYY HH:mm')}</td>\n                        <td className=\"redTeamMatches\">\n                            {match.RedTeam.Players.map(player =>\n                                <div key={player.PlayerID} className='redTeam'>\n                                    <PlayerLabel {...player}/>\n                                </div>\n                            )}\n                        </td>\n                        <td className=\"redTeamMatches avgRedRating\">{Math.round(match.RedTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"redTeamMatches scoreColumn\">{match.RedTeam.Score}</td>\n                        <td className=\"scoreColumn\"> : </td>\n                        <td className=\"blueTeamMatches scoreColumn\">{match.BlueTeam.Score}</td>\n                        <td className=\"blueTeamMatches avgBlueRating\">{Math.round(match.BlueTeam.AvgTeamRating * 10) / 10}</td>\n                        <td className=\"blueTeamMatches\">\n                            {match.BlueTeam.Players.map(player =>\n                                <div key={player.PlayerID} className='blueTeam'>\n                                    <PlayerLabel {...player}/>\n                                </div>\n                            )}\n                        </td>\n                        <td>{Math.round(match.RedTeam.RatingChange * 10) / 10}</td>\n                    </tr>\n                )}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default LastMatchesTable;\n","import React, { useState, useEffect} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\n\ninterface Player {\n    ID: number,\n    Name: string,\n    Wins: number,\n    Losses: number,\n    GoalsShot: number,\n    GoalsScored: number,\n    GoalsLost: number,\n    Matches: any[],\n    Rating: number,\n}\n\nexport const PlayersTable = () => {\n    const [data, setData] = useState<Player[]>([{\n        ID: 0,\n        Name: \"\",\n        Wins: 0,\n        Losses: 0,\n        GoalsShot: 0,\n        GoalsScored: 0,\n        GoalsLost: 0,\n        Matches: [],\n        Rating: 0\n    }]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            BackendURL + \"/getPlayersTable\",\n          );\n          setData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n\n    let counter = 0;\n    let maxRating = 0;\n    let minRating = 2000;\n    data.map(player => {\n        maxRating = Math.max(maxRating, player.Rating);\n        minRating = Math.min(minRating, player.Rating);\n        return null\n    })\n\n    const history = useHistory();\n    function handleClick(playerID: number) {\n        history.push(\"/showPlayer/\" + playerID);\n    }\n\n    return (\n        <Table striped hover className=\"playersTable\">\n            <thead>\n                <tr>\n                <th>No.</th>\n                <th>Name</th>\n                <th>Wins</th>\n                <th>Losses</th>\n                <th>W/L Ratio</th>\n                <th className=\"goalsColumn\">Goals Shot</th>\n                <th className=\"goalsColumn\">Goals Won</th>\n                <th className=\"goalsColumn\">Goals Lost</th>\n                <th className=\"goalsColumn\">Aggression %</th>\n                <th>Rating</th>\n                <th className=\"ratingPercent\">Rating %</th>\n                <th className=\"lastMatch\">Last played</th>\n                </tr>\n            </thead>\n            <tbody>\n        \n            {data.map(player => {\n                let aggressionPercent = (Math.round((player.GoalsShot / player.GoalsScored) * 1000) / 10)  + \"%\"\n                let playerRatingPercent = Math.round((1-((player.Rating - minRating) / (maxRating - minRating)))*100) + \"%\"\n\n                let WLRatio = Math.round(player.Wins / (player.Wins + player.Losses) * 10000) /100 + \"%\"\n                return (player.Wins + player.Losses > 10) &&\n                Date.now() - moment(player.Matches[player.Matches.length-1].Time).unix() * 1000 < 2592000000 && // 30 days\n                ++counter &&\n                <tr className=\"playerRow\" key={player.ID} onClick={() => handleClick(player.ID)}>\n                    <td>{counter}</td>\n                    <td>{player.Name}</td>\n                    <td>{player.Wins}</td>\n                    <td>{player.Losses}</td>\n                    <td>{WLRatio}</td>\n                    <td className=\"goalsColumn\">{player.GoalsShot}</td>\n                    <td className=\"goalsColumn\">{player.GoalsScored}</td>\n                    <td className=\"goalsColumn\">{player.GoalsLost}</td>\n                    <td className=\"goalsColumn\">{aggressionPercent}</td>\n                    <td>{Math.round(player.Rating * 10)/10}</td>\n                    <td className=\"ratingPercent\">{playerRatingPercent}</td>\n                    {\n                        player.Matches[0] !== undefined && \n                        <td className=\"lastMatch\">{moment(player.Matches[player.Matches.length-1].Time).fromNow()}</td>\n                    }\n                </tr>\n            })}\n            </tbody>\n        </Table>\n    )\n}\n\nexport default PlayersTable;\n","import React from 'react';\n\nexport const FutureList = () => {\n    return (\n        <div className=\"futureList\">\n            <h1>Incoming features</h1>\n            <ul>\n                <li><span className='finished'>Player labels</span> 27.08.2020</li>\n                <li>Match card</li>\n                <li>Player card</li>\n                <ul>\n                    <li><span className='finished'>Best rating</span> 07.10.2020</li>\n                    <li><span className='finished'>Worst rating</span> 07.10.2020</li>\n                    <li><span className='finished'>Present rank</span> 07.10.2020</li>\n                    <li><span className='finished'>Todays / Last week / month change</span> 07.10.2020</li>\n                    <li><span className='finished'>Rating amount to drop / climb</span> 07.10.2020</li>\n                    <li><span className='finished'>Biggest gain</span> 07.10.2020</li>\n                    <li><span className='finished'>Biggest drop</span> 07.10.2020</li>\n                    <li><span className='finished'>Average goals per match</span> 07.10.2020</li>\n                    <li><span className='finished'>Average goals shot per match</span> 07.10.2020</li>\n                    <li><span className='finished'>Aggression rating (goals shot / goals won)</span> 07.10.2020</li>\n                    <li><span className='finished'>Last 5 matches trend</span> 07.10.2020</li>\n                    <li><span className='finished'>Latest streak (matches / days)</span> 07.10.2020</li>\n                    <li><span className='finished'>Biggest winning streak (matches / days)</span> 07.10.2020</li>\n                    <li>Matches history</li>\n                    <li><span className='finished'>Top ally (quantitative)</span> 07.10.2020</li>\n                    <li><span className='finished'>Top enemy (quantitative)</span> 07.10.2020</li>\n                    <li>Domination and nemesis (matches / enemy streak)</li>\n                    <li><span className='finished'>Enemies table (name / matches balance)</span> 07.10.2020</li>\n                    <li>Rating history chart</li>\n                    <ul>\n                        <li>Group by day option</li>\n                        <li>Erase time space option</li>\n                    </ul>\n                </ul>\n                <li>Full match analysis\n                <ul>\n                        <li><span className='finished'>Goals</span> 22.09.2020</li>\n                        <li>Ball position</li>\n                        <li>Ball posession\n                        <ul>\n                                <li>Proximity based</li>\n                                <li>Touch based</li>\n                            </ul>\n                        </li>\n                        <li>Previous encounters</li>\n                        <li>Player position heatmap</li>\n                    </ul>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default FutureList;","import React, { useEffect } from 'react';\nimport * as Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport moment from 'moment';\n\n\ninterface PlayerSnapshot {\n    MatchID: number,\n    MatchRef: any,\n    PlayerID: number,\n    PlayerName: string,\n    Rating: number\n}\n\n\nconst processData = (snapshots: PlayerSnapshot[]) => {\n    let processedData: any = {}\n    snapshots.forEach((value) => {\n        if (!(value.PlayerName in processedData)) {\n            processedData[value.PlayerName] = []\n            processedData[value.PlayerName].push([\n                moment(value.MatchRef.Time).valueOf()-3600000,\n                1000,\n            ])\n        }\n        processedData[value.PlayerName].push([\n            moment(value.MatchRef.Time).valueOf(),\n            value.Rating,\n        ])\n    })\n    let returnData: any = []\n    Object.entries(processedData).forEach(\n        ([key, value]) => returnData.push({\n            type: 'line',\n            name: key,\n            data: value\n        })\n    );\n\n\n    return returnData;\n}\n\nexport const Highchart = (props: HighchartsReact.Props) => {\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getPlayersSnapshots\",\n            );\n            let chartData = processData(result.data)\n            Highcharts.chart('highchart-container', {\n                title: {\n                    text: 'Rating over time',\n                    style: {\n                        color: '#FFF',\n                        font: 'bold 16px \"Trebuchet MS\", Verdana, sans-serif'\n                    }\n                },\n                legend: {\n                    itemStyle: {\n                        font: '9pt Trebuchet MS, Verdana, sans-serif',\n                        color: 'white'\n                    },\n                    itemHoverStyle:{\n                        color: 'white'\n                    }   \n                },\n                chart: {\n                    zoomType: 'x',\n                    backgroundColor: 'rgb(6, 29, 82)',\n                },\n                xAxis: {\n                    type: 'datetime',\n                    labels: {\n                        formatter: function() {\n                            return moment(this.value).format('DD-MM-YYYY');\n                        }\n                    },\n                    min: 1586250000000,\n                    tickInterval: 7*24*60*60*1000\n                },\n                yAxis: {\n                    gridLineColor: 'black'\n                },\n                series: chartData\n            })\n\n\n        };\n\n        fetchData();\n    }, []);\n        return (\n            <div id='highchart-container'>\n                <h1>Loading charts...</h1>\n            </div>\n        )\n}\n\nexport default Highchart;","import React from 'react';\n\n\nexport const PlayerPageTile = (data: {title:string, value:string, subscript: string}) => {\n    // debugger;\n    return (\n        <div className=\"playerPageTile\">\n            <div className=\"title\">\n                {data.title}\n            </div>\n            <div className=\"value\">\n                {data.value}\n            </div>\n            <div className=\"subscript\">\n                {data.subscript}\n            </div>\n        </div>\n    )\n}\n\nexport default PlayerPageTile;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router\";\nimport axios from 'axios';\nimport { BackendURL } from '../../constants';\nimport GenericPlayerPageTile from '../playerPageTiles/generic';\nimport moment from 'moment';\nimport PlayerLabel from '../playerLabel/playerLabel';\nimport { useHistory } from 'react-router-dom';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    MatchID: number,\n    PlayerName: string,\n    Rating: number,\n    MatchRef: any\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    BlueTeam: Team,\n    RedTeam: Team\n}\n\ninterface Player {\n    Matches: Match[],\n    GoalsLost: number,\n    GoalsScored: number,\n    GoalsShot: number,\n    ID: number,\n    Losses: number,\n    Name: string,\n    Rating: number,\n    WinRate: number,\n    Wins: number,\n}\n\ninterface PlayerData {\n    Player: Player,\n    Snapshots: PlayerSnapshot[],\n    PlayerRatings: any[]\n}\n\nexport const PlayerPage = () => {\n    let { playerID } = useParams();\n    const [data, setData] = useState<PlayerData>(\n        {\n            Player: {\n                GoalsLost: 0,\n                GoalsScored: 0,\n                GoalsShot: 0,\n                ID: 0,\n                Losses: 0,\n                Name: \"0\",\n                Rating: 0,\n                WinRate: 0,\n                Wins: 0,\n                Matches: [{\n                    ID: 0,\n                    Time: \"2012-12-25 10:00\",\n                    BlueTeam: {\n                        AvgTeamRating: 0,\n                        RatingChange: 0,\n                        Score: 0,\n                        Players: [{\n                            PlayerID: 0,\n                            PlayerName: \"\",\n                            MatchID: 0,\n                            Rating: 0,\n                            MatchRef: \"\"\n                        }]\n                    },\n                    RedTeam: {\n                        AvgTeamRating: 0,\n                        RatingChange: 0,\n                        Score: 0,\n                        Players: [{\n                            PlayerID: 0,\n                            PlayerName: \"\",\n                            MatchID: 0,\n                            Rating: 0,\n                            MatchRef: \"\"\n                        }]\n                    }\n                }]\n            },\n            Snapshots: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                MatchID: 0,\n                Rating: 0,\n                MatchRef: \"\"\n            }],\n            PlayerRatings: [{}]\n        });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getPlayerData?id=\" + playerID,\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n\n    const history = useHistory();\n    function handleClick(MatchID: number) {\n        history.push(\"/showMatch/\" + MatchID);\n    }\n\n    let bestRating = 0;\n    let bestRatingDate = \"\";\n    let worstRating = 3000;\n    let worstRatingDate = \"\";\n\n    let biggestGain = 0;\n    let biggestGainDate = \"\";\n    let biggestDrop = 0;\n    let biggestDropDate = \"\";\n\n    let todayChange = 0;\n    let weeksChange = 0;\n    let monthChange = 0;\n\n    let latestStreak = 0;\n    let biggestWinningStreak = 0;\n    let biggestWinningStreakDate = \"\";\n    let streakStart = \"\";\n    let streakValue = 0;\n\n    let prevMatch = data.Snapshots[0];\n\n    for (let index = 0; index < data.Snapshots.length; index++) {\n        const element = data.Snapshots[index];\n        if (element.Rating < worstRating) {\n            worstRating = Math.round(element.Rating * 10) / 10\n            worstRatingDate = element.MatchRef.Time\n        }\n\n        if (element.Rating > bestRating) {\n            bestRating = Math.round(element.Rating * 10) / 10\n            bestRatingDate = element.MatchRef.Time\n        }\n\n        if (todayChange === 0 && moment(element.MatchRef.Time, \"YYYY-MM-DD hh:mm\") > moment().startOf('day')) {\n            todayChange = Math.round((data.Player.Rating - element.Rating) * 10) / 10\n        }\n\n        if (weeksChange === 0 && moment(element.MatchRef.Time, \"YYYY-MM-DD hh:mm\") > moment().subtract(1, 'week').startOf('day')) {\n            weeksChange = Math.round((data.Player.Rating - element.Rating) * 10) / 10\n        }\n\n        if (monthChange === 0 && moment(element.MatchRef.Time, \"YYYY-MM-DD hh:mm\") > moment().subtract(1, 'month').startOf('day')) {\n            monthChange = Math.round((data.Player.Rating - element.Rating) * 10) / 10\n        }\n\n        if (index === 0) continue;\n        let change = element.Rating - prevMatch.Rating;\n\n        if (change < biggestDrop) {\n            biggestDrop = Math.round(change * 10) / 10\n            biggestDropDate = element.MatchRef.Time\n        }\n\n        if (change > biggestGain) {\n            biggestGain = Math.round(change * 10) / 10\n            biggestGainDate = element.MatchRef.Time\n        }\n\n        if (change > 0) {\n            if (latestStreak > 0) {\n                latestStreak++\n                if (latestStreak > biggestWinningStreak) {\n                    biggestWinningStreak = Math.max(latestStreak, biggestWinningStreak)\n                    biggestWinningStreakDate = streakStart\n                }\n            } else {\n                latestStreak = 1\n                streakStart = prevMatch.MatchRef.Time\n                streakValue = Math.round((data.Player.Rating - prevMatch.Rating) * 10) / 10\n            }\n        } else {\n            if (latestStreak < 0) {\n                latestStreak--\n            } else {\n                latestStreak = -1\n                streakStart = prevMatch.MatchRef.Time\n                streakValue = Math.round((data.Player.Rating - prevMatch.Rating) * 10) / 10\n            }\n        }\n        prevMatch = element\n    }\n    let element = data.Snapshots[data.Snapshots.length - 1]\n\n    if (element.Rating < data.Player.Rating) {\n        if (latestStreak > 0) {\n            latestStreak++\n            if (latestStreak > biggestWinningStreak) {\n                biggestWinningStreak = Math.max(latestStreak, biggestWinningStreak)\n            }\n        } else {\n            latestStreak = 1\n            streakStart = element.MatchRef.Time\n            streakValue = Math.round((data.Player.Rating - prevMatch.Rating) * 10) / 10\n        }\n    } else {\n        if (latestStreak < 0) {\n            latestStreak--\n        } else {\n            latestStreak = -1\n            streakStart = element.MatchRef.Time\n            streakValue = Math.round((data.Player.Rating - prevMatch.Rating) * 10) / 10\n        }\n    }\n\n    let ratingPosition = 0\n    let upperNeighbor = { Name: \"GOD\", Rating: 3000 }\n    let lowerNeighbor = { Name: \"MUD\", Rating: 0 }\n\n    for (let index = 0; index < data.PlayerRatings.length; index++) {\n        const player = data.PlayerRatings[index];\n        if (data.Player.Name === player.Name) {\n            ratingPosition = index + 1;\n            if (index > 0) {\n                upperNeighbor = {\n                    Name: data.PlayerRatings[index - 1].Name,\n                    Rating: data.PlayerRatings[index - 1].Rating,\n                }\n            }\n\n            if (index !== data.PlayerRatings.length - 1) {\n                lowerNeighbor = {\n                    Name: data.PlayerRatings[index + 1].Name,\n                    Rating: data.PlayerRatings[index + 1].Rating,\n                }\n            }\n        }\n    }\n\n    let goalsPerMatch = (Math.round((data.Player.GoalsScored / (data.Player.Wins + data.Player.Losses)) * 10) / 10 +\n        \" : \" +\n        Math.round((data.Player.GoalsLost / (data.Player.Wins + data.Player.Losses)) * 10) / 10)\n\n    let goalsShotPerMatch = Math.round((data.Player.GoalsShot / (data.Player.Wins + data.Player.Losses) * 10)) / 10;\n\n    let matchesPerDay = Math.round(\n        ((data.Player.Wins + data.Player.Losses) / moment().diff(moment(data.Snapshots[0].MatchRef.Time, \"YYYY-MM-DD hh:mm\"), 'days')) * 100) / 100\n\n\n    let lastMatchesTrend = data.Player.Rating > data.Snapshots[data.Snapshots.length - 1].Rating ? \"W\" : \"L\";\n\n    for (let index = (data.Snapshots.length - 1); index > (data.Snapshots.length - 5) && index > 0; index--) {\n        const match = data.Snapshots[index];\n        if (match.Rating < data.Snapshots[index - 1].Rating) {\n            lastMatchesTrend += \" L\"\n        } else {\n            lastMatchesTrend += \" W\"\n        }\n    }\n\n    var additionalMatchData: { [k: string]: any } = {}\n    var alliesQuantitative: { [k: string]: any } = {}\n    var enemiesQuantitative: { [k: string]: any } = {}\n\n    for (let index = 0; index < data.Player.Matches.length; index++) {\n        const match = data.Player.Matches[index];\n        let isPlayerRed = true;\n        let didRedWon = match.RedTeam.Score > match.BlueTeam.Score;\n        let playerRatingChange = 0;\n        for (let j = 0; j < match.BlueTeam.Players.length; j++) {\n            const bluePlayer = match.BlueTeam.Players[j];\n            if (bluePlayer.PlayerName === data.Player.Name) {\n                isPlayerRed = false;\n                break;\n            }\n        }\n        if (isPlayerRed) {\n            for (let j = 0; j < match.RedTeam.Players.length; j++) {\n                const redPlayer = match.RedTeam.Players[j];\n                if (redPlayer.PlayerName === data.Player.Name) continue;\n\n                if (!(redPlayer.PlayerName in alliesQuantitative)) {\n                    alliesQuantitative[redPlayer.PlayerName] = { \n                        count: 0, \n                        matchBalance: 0, \n                        wonAgainst: 0, \n                        lostAgainst: 0, \n                        currentStreak: 0, \n                        id: redPlayer.PlayerID \n                    }\n                }\n                alliesQuantitative[redPlayer.PlayerName].count++;\n\n            }\n            for (let j = 0; j < match.BlueTeam.Players.length; j++) {\n                const bluePlayer = match.BlueTeam.Players[j];\n                if (!(bluePlayer.PlayerName in enemiesQuantitative)) {\n                    enemiesQuantitative[bluePlayer.PlayerName] = { \n                        count: 0, \n                        matchBalance: 0, \n                        wonAgainst: 0, \n                        lostAgainst: 0, \n                        currentStreak: 0, \n                        pointsBalance: 0, \n                        id: bluePlayer.PlayerID \n                    }\n                }\n                enemiesQuantitative[bluePlayer.PlayerName].count++\n                enemiesQuantitative[bluePlayer.PlayerName].matchBalance += didRedWon ? 1 : -1\n                enemiesQuantitative[bluePlayer.PlayerName].wonAgainst += didRedWon ? 1 : 0\n                enemiesQuantitative[bluePlayer.PlayerName].lostAgainst += didRedWon ? 0 : 1\n                enemiesQuantitative[bluePlayer.PlayerName].pointsBalance += match.RedTeam.RatingChange\n\n                let streakAmount = enemiesQuantitative[bluePlayer.PlayerName].currentStreak\n                if (didRedWon) {\n                    enemiesQuantitative[bluePlayer.PlayerName].currentStreak = streakAmount > 0 ? streakAmount + 1 : 1\n                } else {\n                    enemiesQuantitative[bluePlayer.PlayerName].currentStreak = streakAmount < 0 ? streakAmount - 1 : -1\n                }\n\n                playerRatingChange = match.RedTeam.RatingChange\n            }\n        } else {\n            for (let j = 0; j < match.RedTeam.Players.length; j++) {\n                const redPlayer = match.RedTeam.Players[j];\n                if (!(redPlayer.PlayerName in enemiesQuantitative)) {\n                    enemiesQuantitative[redPlayer.PlayerName] = { \n                        count: 0, \n                        matchBalance: 0, \n                        wonAgainst: 0, \n                        lostAgainst: 0, \n                        currentStreak: 0, \n                        pointsBalance: 0, \n                        id: redPlayer.PlayerID \n                    }\n                }\n                enemiesQuantitative[redPlayer.PlayerName].count++\n                enemiesQuantitative[redPlayer.PlayerName].matchBalance += didRedWon ? -1 : 1\n                enemiesQuantitative[redPlayer.PlayerName].wonAgainst += didRedWon ? 0 : 1\n                enemiesQuantitative[redPlayer.PlayerName].lostAgainst += didRedWon ? 1 : 0\n                enemiesQuantitative[redPlayer.PlayerName].pointsBalance += match.BlueTeam.RatingChange\n\n                let streakAmount = enemiesQuantitative[redPlayer.PlayerName].currentStreak\n                if (didRedWon) {\n                    enemiesQuantitative[redPlayer.PlayerName].currentStreak = streakAmount < 0 ? streakAmount - 1 : -1\n                } else {\n                    enemiesQuantitative[redPlayer.PlayerName].currentStreak = streakAmount > 0 ? streakAmount + 1 : 1\n                }\n\n            }\n            for (let j = 0; j < match.BlueTeam.Players.length; j++) {\n                const bluePlayer = match.BlueTeam.Players[j];\n                if (bluePlayer.PlayerName === data.Player.Name) continue;\n                if (!(bluePlayer.PlayerName in alliesQuantitative)) {\n                    alliesQuantitative[bluePlayer.PlayerName] = { \n                        count: 0, \n                        matchBalance: 0, \n                        wonAgainst: 0, \n                        lostAgainst: 0, \n                        currentStreak: 0, \n                        id: bluePlayer.PlayerID\n                    }\n                }\n                alliesQuantitative[bluePlayer.PlayerName].count++\n\n            }\n            playerRatingChange = match.BlueTeam.RatingChange\n        }\n        additionalMatchData[match.ID] = {playerRatingChange: playerRatingChange}\n    }\n    var enemiesQuantitativeSorted = [];\n    for (var enemy in enemiesQuantitative) {\n        enemiesQuantitativeSorted.push([enemy, enemiesQuantitative[enemy].count]);\n    }\n\n    enemiesQuantitativeSorted.sort(function (a, b) {\n        return b[1] - a[1];\n    });;\n\n    var enemiesBalanceSorted = [];\n    for (var enemy in enemiesQuantitative) {\n        enemiesBalanceSorted.push([\n            enemy,\n            enemiesQuantitative[enemy].matchBalance,\n            enemiesQuantitative[enemy].wonAgainst,\n            enemiesQuantitative[enemy].lostAgainst,\n            enemiesQuantitative[enemy].currentStreak,\n            enemiesQuantitative[enemy].id,\n            enemiesQuantitative[enemy].pointsBalance]);\n    }\n\n    enemiesBalanceSorted.sort(function (a, b) {\n        return b[1] - a[1];\n    });;\n\n    var alliesQuantitativeSorted = [];\n    for (var ally in alliesQuantitative) {\n        alliesQuantitativeSorted.push([ally, alliesQuantitative[ally].count]);\n    }\n\n    alliesQuantitativeSorted.sort(function (a, b) {\n        return b[1] - a[1];\n    });;\n\n    return (\n        <div>\n            <h1>{data.Player.Name}</h1>\n            <div className=\"data\">\n                <div className=\"leftPanel\">\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Player since\",\n                            value: data.Snapshots[0].MatchRef.Time,\n                            subscript: moment(data.Snapshots[0].MatchRef.Time, \"YYYY-MM-DD hh:mm\").fromNow()\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Matches balance\",\n                            value: (data.Player.Wins + \" : \" + data.Player.Losses),\n                            subscript: (data.Player.Wins - data.Player.Losses).toString()\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Total matches\",\n                            value: (data.Player.Wins + data.Player.Losses).toString(),\n                            subscript: \"~\" + matchesPerDay.toString() + \" per day\"\n                        }} />\n                    </div>\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Current rating\",\n                            value: data.Player.Rating.toString(),\n                            subscript: \"\"\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Rating place\",\n                            value: ratingPosition.toString(),\n                            subscript: \"\"\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Upper neighbor\",\n                            value: upperNeighbor.Name + \" (\" + Math.round(upperNeighbor.Rating * 10) / 10 + \")\",\n                            subscript: (Math.round((upperNeighbor.Rating - data.Player.Rating) * 10) / 10).toString() + \"pts above you\"\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Lower neighbor\",\n                            value: lowerNeighbor.Name + \" (\" + Math.round(lowerNeighbor.Rating * 10) / 10 + \")\",\n                            subscript: (Math.round((data.Player.Rating - lowerNeighbor.Rating) * 10) / 10).toString() + \"pts below you\"\n                        }} />\n                    </div>\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Goals\",\n                            value: (data.Player.GoalsScored + \" : \" + data.Player.GoalsLost),\n                            subscript: goalsPerMatch + \" avg\"\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Goals Shot\",\n                            value: data.Player.GoalsShot.toString(),\n                            subscript: (\"~\" + goalsShotPerMatch.toString() + \" per match\")\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Shot %\",\n                            value: (Math.round((data.Player.GoalsShot / data.Player.GoalsScored) * 1000) / 10).toString() + \"%\",\n                            subscript: \"\"\n                        }} />\n                    </div>\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Best Rating\",\n                            value: bestRating.toString(),\n                            subscript: bestRatingDate\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Worst Rating\",\n                            value: worstRating.toString(),\n                            subscript: worstRatingDate\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Biggest gain\",\n                            value: biggestGain.toString() + \"pts\",\n                            subscript: biggestGainDate\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Biggest drop\",\n                            value: biggestDrop.toString() + \"pts\",\n                            subscript: biggestDropDate\n                        }} />\n                    </div>\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Today's change\",\n                            value: todayChange.toString() + \"pts\",\n                            subscript: \"Since \" + moment().format('YYYY-MM-DD')\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Week's change\",\n                            value: weeksChange.toString() + \"pts\",\n                            subscript: \"Since \" + moment().subtract(1, 'week').format('YYYY-MM-DD')\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Month's change\",\n                            value: monthChange.toString() + \"pts\",\n                            subscript: \"Since \" + moment().subtract(1, 'month').format('YYYY-MM-DD')\n                        }} />\n                    </div>\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Match streak\",\n                            value: latestStreak.toString() + \" (\" + streakValue + \"pts)\",\n                            subscript: \"Since \" + streakStart\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Biggest winning streak\",\n                            value: biggestWinningStreak.toString(),\n                            subscript: \"Started at \" + biggestWinningStreakDate\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Last matches trend\",\n                            value: lastMatchesTrend,\n                            subscript: \"\"\n                        }} />\n                    </div>\n                    <div className=\"dataRow\">\n                        <GenericPlayerPageTile {...{\n                            title: \"Top ally\",\n                            value: alliesQuantitativeSorted[0][0],\n                            subscript: alliesQuantitativeSorted[0][1] + \" matches\"\n                        }} />\n                        <GenericPlayerPageTile {...{\n                            title: \"Top enemy\",\n                            value: enemiesQuantitativeSorted[0][0],\n                            subscript: enemiesQuantitativeSorted[0][1] + \" matches\"\n                        }} />\n                    </div>\n                </div>\n                <div className=\"rightPanel\">\n                    <div className=\"enemiesBalance\">\n                        <div className=\"title\"><h3>Enemies stats (won - lost against specific opponent)</h3></div>\n                        <table>\n                            <thead>\n                                <th>Enemy</th><th>Score</th><th>Win ratio</th><th>Streak</th><th>Points gained</th>\n                            </thead>\n                            <tbody>\n                                {enemiesBalanceSorted.map(enemy =>\n                                    <tr>\n                                        <td><PlayerLabel {...{PlayerID: enemy[5], PlayerName: enemy[0], Rating: 0}}/>\n                                        </td>\n                                        <td>{enemy[1]} ({enemy[2]} : {enemy[3]})</td>\n                                        <td>{Math.round((enemy[2] / (enemy[2] + enemy[3]))*1000)/10}%</td>\n                                        <td>{enemy[4]}</td>\n                                        <td>{Math.round(enemy[6]*10)/10}</td>\n                                        </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                    <div className=\"matchHistory\">\n                        <h3>Matches History</h3>\n                        <table className=\"matchHistoryTable table\">\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Red<br />Players</th>\n                                    <th className=\"avgRedRating\">Avg Red<br />Rating</th>\n                                    <th className=\"scoreColumn\" colSpan={3}>Score</th>\n                                    <th className=\"avgBlueRating\">Avg Blue<br />Rating</th>\n                                    <th>Blue<br />Players</th>\n                                    <th>Player Rating<br />Change</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {data.Player.Matches.map(match =>\n                                    <tr key={match.ID} onClick={() => handleClick(match.ID)}>\n                                        <td>\n                                            {moment(match.Time).format('DD-MM-YYYY')}<br />\n                                            {moment(match.Time).format('HH:mm')}\n                                        </td>\n                                        <td className=\"redTeamMatches\">\n                                            {match.RedTeam.Players.map(player =>\n                                                <div key={player.PlayerID} className='redTeam'>\n                                                    <PlayerLabel {...player} />\n                                                </div>\n                                            )}\n                                        </td>\n                                        <td className=\"redTeamMatches avgRedRating\">{Math.round(match.RedTeam.AvgTeamRating * 10) / 10}</td>\n                                        <td className=\"redTeamMatches scoreColumn\">{match.RedTeam.Score}</td>\n                                        <td className=\"scoreColumn\"> : </td>\n                                        <td className=\"blueTeamMatches scoreColumn\">{match.BlueTeam.Score}</td>\n                                        <td className=\"blueTeamMatches avgBlueRating\">{Math.round(match.BlueTeam.AvgTeamRating * 10) / 10}</td>\n                                        <td className=\"blueTeamMatches\">\n                                            {match.BlueTeam.Players.map(player =>\n                                                <div key={player.PlayerID} className='blueTeam'>\n                                                    <PlayerLabel {...player} />\n                                                </div>\n                                            )}\n                                        </td>\n                                        <td>{Math.round(additionalMatchData[match.ID].playerRatingChange * 10) / 10}</td>\n                                    </tr>).reverse()}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\nexport default PlayerPage;\n","import React from 'react';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    GoalsNumber: number,\n    Rating: number\n}\n\nexport const PlayerGoalsLabel = (player : PlayerSnapshot) => {\n    const playerLink = \"#/showPlayer/\" + player.PlayerID\n    let playerGoals = \"\"\n    for (let i = 0; i < player.GoalsNumber; i++) {\n        playerGoals += \"⚽\"\n    }\n    return (\n            <div className=\"playerGoals\">\n                <span>{playerGoals}</span>\n            </div>\n    )\n}\n\nexport default PlayerGoalsLabel;\n","import React, { useState, useEffect } from 'react';\nimport { useParams} from \"react-router\";\nimport axios from 'axios';\nimport { BackendURL } from '../../constants'\nimport PlayerLabel from '../playerLabel/playerLabel';\nimport PlayerGoalsLabel from '../playerGoalsLabel/playerGoalsLabel';\n\ninterface PlayerSnapshot {\n    PlayerID: number,\n    PlayerName: string,\n    GoalsNumber: number,\n    Rating: number\n}\n\ninterface Team {\n    AvgTeamRating: number,\n    RatingChange: number,\n    Score: number,\n    Players: PlayerSnapshot[]\n}\n\ninterface Goal {\n    IsRed: boolean,\n    PlayerID: number,\n    PlayerName: string,\n    ShotTime: number,\n    Speed: number,\n    Time: number,\n    TravelTime: number\n}\n\ninterface Match {\n    ID: number,\n    Time: string,\n    StartTime: number,\n    EndTime: number,\n    BlueTeam: Team,\n    RedTeam: Team,\n    Goals: Goal[]\n}\n\nfunction secondsToTime(seconds: number){\n    seconds = Math.floor(seconds)\n    let minutes = Math.floor(seconds / 60)\n    let secString = (seconds - minutes * 60).toString()\n    if (seconds - minutes * 60 < 10) {\n        secString = \"0\" + secString\n    }\n    return minutes + \":\" + secString\n}\n\nexport const MatchPage = () => {\n    let { matchID } = useParams();\n    const [data, setData] = useState<Match>({\n        ID: 0,\n        Time: \"2012-12-25 10:00\",\n        StartTime: 0,\n        EndTime: 600,\n        BlueTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0,\n                GoalsNumber: 0\n            }]\n        },\n        RedTeam: {\n            AvgTeamRating: 0,\n            RatingChange: 0,\n            Score: 0,\n            Players: [{\n                PlayerID: 0,\n                PlayerName: \"\",\n                Rating: 0,\n                GoalsNumber: 0\n            }]\n        },\n        Goals:\n        [{\n            IsRed: false,\n            PlayerID: 0,\n            PlayerName: \"\",\n            ShotTime: 0,\n            Speed: 0,\n            Time: 0,\n            TravelTime: 0\n        }]\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await axios(\n                BackendURL + \"/getMatchByID?id=\" + matchID,\n            );\n            setData(result.data);\n        };\n\n        fetchData();\n    }, []);\n\n    let arrow = \"==>\"\n    if (data.RedTeam.RatingChange > 0) {\n        arrow = \"<==\"\n    } \n            \n    data.RedTeam.Players.map (player => {\n            player.GoalsNumber = 0\n            data.Goals.map(goal => {\n                if (player.PlayerID === goal.PlayerID){\n                    player.GoalsNumber++\n                } \n            })\n            return player\n        })\n        data.BlueTeam.Players.map (player => {\n            player.GoalsNumber = 0\n            data.Goals.map(goal => {\n                if (player.PlayerID === goal.PlayerID){\n                    player.GoalsNumber++\n                } \n            })\n            return player\n        })\n\n    return (\n        <div>\n            <h2>MATCH DETAILS VIEW</h2>\n            <div className=\"matchDetailsPanels\">\n                <div className=\"leftPanel\">\n                    <div className=\"scorePanel\">\n                        <div>\n                            {data.RedTeam.Players.map(player => (\n                                <div key={player.PlayerID} className='redTeam'>\n                                    <PlayerLabel {...player}/>\n                                    <PlayerGoalsLabel {...player}/>\n                                </div>\n                            ))}\n                        </div>\n                        <div className=\"scoreData\">\n                            <div className=\"scores\">\n                                <span className=\"redScore\">{data.RedTeam.Score}</span>\n                                {'\\u00A0'}:{'\\u00A0'}\n                                <span className=\"blueScore\">{data.BlueTeam.Score}</span>\n                            </div>\n                            <div className=\"arrow\">\n                                {arrow}\n                            </div>\n                            <div className=\"ratingChange\">\n                                {Math.abs(Math.round(data.RedTeam.RatingChange * 100) / 100)}\n                            </div>\n                        </div>\n                        <div>\n                        {data.BlueTeam.Players.map(player => (\n                                <div key={player.PlayerID} className='blueTeam'>\n                                    <PlayerLabel {...player}/>\n                                    <PlayerGoalsLabel {...player}/>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"goalsChartTitle\">GOALS CHART</div>\n                    <div className=\"goalsChart\">\n                        <div className=\"goal matchStart\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart\">\n                                <div className=\"matchStartTime\">{secondsToTime(data.StartTime)}</div>\n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                        <div className=\"goal matchStart\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart\">\n                                <div className=\"goalElement matchStart\">ￜ</div>\n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                            {data.Goals.map(goal => (\n                                <div className=\"goal\">\n                                    <div className=\"redTeam\">\n                                    {goal.IsRed && \n                                        <div>\n                                             ({Math.round(goal.Speed * 100)/10} km/h) {goal.PlayerName} - {secondsToTime(goal.Time)}\n                                        </div>\n                                    }\n                                    </div>\n                                    <div className=\"chart\">\n                                    {goal.IsRed && \n                                        <div className=\"goalElement red\">ￆ</div>\n                                    }\n                                    {!goal.IsRed && \n                                        <div className=\"goalElement blue\">ￂ</div>\n                                    }\n                                    </div>\n\n                                    <div className=\"blueTeam\">\n                                    {!goal.IsRed && \n                                        <div>\n                                            {secondsToTime(goal.Time)} - {goal.PlayerName} ({Math.round(goal.Speed * 100)/10} km/h)\n                                        </div>\n                                    }\n                                    </div>\n                                </div>\n                            ))}\n\n                        <div className=\"goal\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart matchEnd\">\n                                <div className=\"goalElement matchEnd\">ￜ</div>\n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                        <div className=\"goal\">\n                            <div className=\"redTeam\"></div>\n                            <div className=\"chart matchEnd\">\n                                <div className=\"matchEndTime\">{secondsToTime(data.EndTime)}</div> \n                            </div>\n                            <div className=\"blueTeam\"></div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"rightPanel\">\n                    <a href={\"https://www.haxball.com/replay?v=3#\" + BackendURL + \"/getFile?id=\" + data.ID} target=\"_blank\">LINK TO REPLAY</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MatchPage;\n","import * as React from 'react';\nimport LastMatchesTable from './lastMatches/table';\nimport PlayersTable from './playersTable/playersTable'\nimport FutureList from './future/future';\nimport Highchart from './charts/highchart';\nimport PlayerPage from './playerPage/playerPage';\nimport MatchPage from './matchPage/matchPage';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nexport default class Menu extends React.Component {\n    state = {\n      count: 0\n    };\n  \n    increment = () => {\n      this.setState({\n        count: (this.state.count + 1)\n      });\n    };\n  \n    decrement = () => {\n      this.setState({\n        count: (this.state.count - 1)\n      });\n    };\n  \n    render () {\n      return (\n        <Router>\n          <div className=\"mainContainer\">\n            <Switch>\n              <Route path=\"/future\">\n                <FutureList />\n              </Route>\n              <Route path=\"/charts\">\n                <Highchart />\n              </Route>\n              <Route path=\"/matches\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n              </Route>\n              <Route path=\"/showPlayer/:playerID\">\n                <PlayerPage />\n              </Route>\n              <Route path=\"/showMatch/:matchID\">\n                <MatchPage />\n              </Route>\n              <Route path=\"/players\">\n                <h1>Players Table</h1>\n                <PlayersTable />\n              </Route>\n              <Route path=\"/\">\n                <h1>Last Matches</h1>\n                <LastMatchesTable />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      )\n    }\n  }\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/menu/menu'\nimport MainContainer from './components/mainContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}